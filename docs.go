// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Support",
            "url": "http://github.com/monetr/rest-api"
        },
        "license": {
            "name": "Business Source License 1.1",
            "url": "https://github.com/monetr/rest-api/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/authentication/login": {
            "post": {
                "description": "Authenticate a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login",
                "operationId": "login",
                "parameters": [
                    {
                        "description": "User Login Request",
                        "name": "Login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/authentication/register": {
            "post": {
                "description": "Register creates a new login, user and account. Logins are used for authentication, users tie authentication to an account, and accounts hold budgeting data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register",
                "operationId": "register",
                "parameters": [
                    {
                        "description": "New User Registration",
                        "name": "Registration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists all of the bank accounts for the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank Accounts"
                ],
                "summary": "List All Bank Accounts",
                "operationId": "list-all-bank-accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swag.BankAccountResponse"
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a bank account for the provided link. Note: Bank accounts can only be created this way for manual links. Attempting to create a bank account for a link that is associated with Plaid will result in an error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank Accounts"
                ],
                "summary": "Create Bank Account",
                "operationId": "create-bank-account",
                "parameters": [
                    {
                        "description": "New Bank Account",
                        "name": "newBankAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.CreateBankAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.BankAccountResponse"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/balances": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the balances for the specified bank account (including calculated balances).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank Accounts"
                ],
                "summary": "Get Bank Account Balances",
                "operationId": "get-bank-account-balances",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/repository.Balances"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/funding_schedules": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all of the funding schedule's for the current bank account.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Schedules"
                ],
                "summary": "List Funding Schedules",
                "operationId": "list-funding-schedules",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FundingSchedule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Schedules"
                ],
                "summary": "Create Funding Schedule",
                "operationId": "create-funding-schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New Funding Schedule",
                        "name": "fundingSchedule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FundingSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.FundingSchedule"
                        }
                    },
                    "400": {
                        "description": "Malformed JSON or invalid RRule.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to persist data.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/funding_schedules/stats": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve information about how much spending objects will receive on the next funding schedule.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Schedules"
                ],
                "summary": "Get Funding Stats",
                "operationId": "get-funding-status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/repository.FundingStats"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/spending": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all of the spending for the specified bank account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spending"
                ],
                "summary": "List Spending",
                "operationId": "list-spending",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swag.SpendingResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing spending object. Some changes may cause the spending object to be recalculated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spending"
                ],
                "summary": "Update Spending",
                "operationId": "update-spending",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated spending",
                        "name": "Spending",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.UpdateSpendingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.SpendingResponse"
                        }
                    },
                    "400": {
                        "description": "Malformed JSON or invalid RRule.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to persist data.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create an spending for the specified bank account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spending"
                ],
                "summary": "Create Spending",
                "operationId": "create-spending",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New spending",
                        "name": "Spending",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.NewSpendingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.SpendingResponse"
                        }
                    },
                    "400": {
                        "description": "Malformed JSON or invalid RRule.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to persist data.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/spending/transfer": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Transfer allocated funds to or from a spending object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spending"
                ],
                "summary": "Transfer To or From Spending",
                "operationId": "transfer-spending",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Transfer",
                        "name": "Spending",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.SpendingTransfer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swag.TransferResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed JSON or invalid RRule.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to persist data.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/spending/{spendingId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a spending object. This will set any transactions that have spent from this object back to spent from \"Safe-To-Spend\". If the spending object is successfully deleted, this endpoint simply returns 200 with an empty body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spending"
                ],
                "summary": "Delete Spending",
                "operationId": "delete-spending",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Spending ID to be deleted",
                        "name": "spendingId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Malformed JSON or invalid RRule.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "500": {
                        "description": "Failed to persist data.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/transactions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists the transactions for the specified bank account Id. Transactions are returned sorted by the date\nthey were authorized (descending) and then by their numeric Id (descending). This means that\ntransactions that were first seen later will be higher in the list than they may have actually occurred.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "List Transactions",
                "operationId": "list-transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Specifies the number of transactions to return in the result, default is 25. Max is 100.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of transactions to skip before returning any.",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swag.TransactionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/transactions/spending/{spendingId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists the transactions for the specified spending Id within the specified bank account Id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "List Transactions For Spending",
                "operationId": "list-transactions-for-spending",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Spending ID",
                        "name": "spendingId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Specifies the number of transactions to return in the result, default is 25. Max is 100.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of transactions to skip before returning any.",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swag.TransactionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.SpendingNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/transactions/{transactionId}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the provided transaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Update Transaction",
                "operationId": "update-transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "TransactionId ",
                        "name": "transactionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated transaction",
                        "name": "Transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.UpdateTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swag.TransactionUpdateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/billing/checkout/{checkoutSessionId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "After completing a checkout session, retrieve the outcome of the checkout session and persist it immediately.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Billing"
                ],
                "summary": "Get Post-Checkout Session Details",
                "operationId": "get-post-checkout-session-details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stripe Checkout Session ID",
                        "name": "checkoutSessionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.AfterCheckoutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/billing/create_checkout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a checkout session for Stripe. This is used to manage new subscriptions to monetr and offload the complexity of managing subscriptions. **Note:** You cannot create a checkout session if you have an active subscrption.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Billing"
                ],
                "summary": "Create Checkout Session",
                "operationId": "create-checkout-session",
                "parameters": [
                    {
                        "description": "New Checkout Session",
                        "name": "createCheckoutSession",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.CreateCheckoutSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.CreateCheckoutSessionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/billing/portal": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a Stripe portal session for managing the subscription and return the session Id to the client. The client can then redirect the user to this session to manage the monetr subscription completely within Stripe.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Billing"
                ],
                "summary": "Get Stripe Portal",
                "operationId": "get-stripe-portal",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swag.CreatePortalSessionResponse"
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/config": {
            "get": {
                "description": "Provides the configuration that should be used by the frontend application or UI.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Get Config",
                "operationId": "app-config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.ConfigResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Just a simple health check endpoint. This is not used at all in the frontend of the application and is meant to be used in containers to determine if the primary API listener is working.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check API Health",
                "operationId": "api-health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.HealthResponse"
                        }
                    }
                }
            }
        },
        "/link/wait/{linkId:uint64}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint is used to \"wait\" for all of the data associated with a link to be deleted. If the link is\nis already deleted then a simple **200** is returned to the caller. If the link is not deleted then this\nendpoint will block for up to 30 seconds at a time while it waits for the link to be removed. If it is\nremoved while the endpoint is blocking then it will return 200 at that time.",
                "tags": [
                    "Links"
                ],
                "summary": "Wait For Link Deletion",
                "operationId": "wait-for-link-deletion",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Link ID for the link that was/is being removed.",
                        "name": "linkId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "408": {
                        "description": ""
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/links": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists all of the links for the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Links"
                ],
                "summary": "List All Links",
                "operationId": "list-all-links",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/swag.LinkResponse"
                            }
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a manual link.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Links"
                ],
                "summary": "Create A Link",
                "operationId": "create-link",
                "parameters": [
                    {
                        "description": "New Manual Link",
                        "name": "newLink",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.CreateLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Newly created manual link",
                        "schema": {
                            "$ref": "#/definitions/swag.LinkResponse"
                        }
                    },
                    "400": {
                        "description": "Malformed JSON.",
                        "schema": {
                            "$ref": "#/definitions/controller.MalformedJSONError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Something went wrong on our end.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/links/convert/{linkId}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Convert an existing link into a manual one.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Links"
                ],
                "summary": "Convert A Link To Manual",
                "operationId": "convert-link",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Link ID",
                        "name": "linkId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New Manual Link",
                        "name": "newLink",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.CreateLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New link object after being converted to a manual link.",
                        "schema": {
                            "$ref": "#/definitions/swag.LinkResponse"
                        }
                    },
                    "400": {
                        "description": "The link specified is already a manual link.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Something went wrong on our end.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/links/{linkId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a single specific link using the link's unique Id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Links"
                ],
                "summary": "Get Link",
                "operationId": "get-link",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Link ID",
                        "name": "linkId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.LinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidLinkIdError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.LinkNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing link.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Links"
                ],
                "summary": "Update Link",
                "operationId": "update-link",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Link ID",
                        "name": "linkId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Link",
                        "name": "newLink",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.UpdateLinkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated link object after changes.",
                        "schema": {
                            "$ref": "#/definitions/swag.LinkResponse"
                        }
                    },
                    "304": {
                        "description": "If no updates were made then the link object is returned unchanged.",
                        "schema": {
                            "$ref": "#/definitions/swag.LinkResponse"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controller.LinkNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Something went wrong on our end.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove a link from your account. This will remove\n- All bank accounts associated with this link.\n- All spending objects associated with each of those bank accounts.\n- All transactions for the those bank accounts.\nThis cannot be undone and data cannot be recovered.\nIf the link specified is a Plaid link, then the access_token associated with that link will also be\nrevoked. Link data is deleted in the background, so if you need to \"wait\" for all of the link's data to\nbe properly deleted. Then you should poll the ` + "`" + `/link/wait` + "`" + ` endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Links"
                ],
                "summary": "Delete Manual Link",
                "operationId": "delete-manual-link",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Link ID for the plaid link that is being setup. NOTE: Not Plaid's ID, this is a numeric ID we assign to the object that is returned from the callback endpoint.",
                        "name": "linkId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "402": {
                        "description": "Payment Required",
                        "schema": {
                            "$ref": "#/definitions/controller.SubscriptionNotActiveError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/plaid/link/setup/wait/{linkId:uint64}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Long poll endpoint that will timeout if data has not yet been pulled. Or will return 200 if data is ready.",
                "tags": [
                    "Plaid"
                ],
                "summary": "Wait For Plaid Account Data",
                "operationId": "wait-for-plaid-data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Link ID for the plaid link that is being setup. NOTE: Not Plaid's ID, this is a numeric ID we assign to the object that is returned from the callback endpoint.",
                        "name": "linkId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "408": {
                        "description": ""
                    }
                }
            }
        },
        "/plaid/token/callback": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Receives the public token after a user has authenticated their bank account to exchange with plaid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plaid"
                ],
                "summary": "Plaid Token Callback",
                "operationId": "plaid-token-callback",
                "parameters": [
                    {
                        "description": "New token callback request.",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.NewPlaidTokenCallbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.PlaidTokenCallbackResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/plaid/token/new": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generates a link token from Plaid to be used to authenticate a user's bank account with our application.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plaid"
                ],
                "summary": "New Plaid Token",
                "operationId": "new-plaid-token",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "If true, the API will check and see if a plaid link token already exists for the current user. If one is present then it is returned instead of creating a new link token.",
                        "name": "use_cache",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.PlaidNewLinkTokenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/plaid/update/callback": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This is used when handling an update flow for a Plaid link. Rather than returning the public token to the normal callback endpoint, this one should be used instead. This one assumes the link already exists and handles it slightly differently than it would for a new link.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plaid"
                ],
                "summary": "Updated Token Callback",
                "operationId": "updated-token-callback",
                "parameters": [
                    {
                        "description": "Update token callback request.",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.UpdatePlaidTokenCallbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.LinkResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/plaid/update/{linkId:uint64}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing Plaid link, this can be used to re-authenticate a link if it requires it or to potentially solve an error state.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plaid"
                ],
                "summary": "Update Plaid Link",
                "operationId": "update-plaid-link",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The Link Id that you wish to put into update mode, must be a Plaid link.",
                        "name": "linkId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.PlaidNewLinkTokenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.ApiError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "something went wrong on our end"
                }
            }
        },
        "controller.InvalidBankAccountIdError": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Contains an error telling the user that they must provide a valid bank account Id for this request.",
                    "type": "string",
                    "example": "invalid bank account Id provided"
                }
            }
        },
        "controller.InvalidLinkIdError": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Contains an error telling the user that they must provide a valid link Id for this request.",
                    "type": "string",
                    "example": "must specify a link Id to retrieve"
                }
            }
        },
        "controller.LinkNotFoundError": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "This error is returned when the user attempts to retrieve a link that does not exist or belong to their account.",
                    "type": "string",
                    "example": "failed to retrieve link: record does not exist"
                }
            }
        },
        "controller.MalformedJSONError": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Will include a message indicating that the request body is not valid JSON.",
                    "type": "string",
                    "example": "malformed json"
                }
            }
        },
        "controller.SpendingNotFoundError": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "This error is returned when the user attempts to retrieve a spending object that does not exist or belong to their account.",
                    "type": "string",
                    "example": "failed to retrieve spending: record does not exist"
                }
            }
        },
        "controller.SpendingTransfer": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "fromSpendingId": {
                    "type": "integer"
                },
                "toSpendingId": {
                    "type": "integer"
                }
            }
        },
        "controller.SubscriptionNotActiveError": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Will include a message indicating that the user's subscription is not active. Will always be returned with a 402\nstatus code.",
                    "type": "string",
                    "example": "subscription is not active"
                }
            }
        },
        "models.Account": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "integer"
                },
                "subscriptionActiveUntil": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            }
        },
        "models.FundingSchedule": {
            "type": "object",
            "properties": {
                "bankAccountId": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "fundingScheduleId": {
                    "type": "integer"
                },
                "lastOccurrence": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nextOccurrence": {
                    "type": "string"
                },
                "rule": {
                    "type": "string",
                    "example": "FREQ=MONTHLY;BYMONTHDAY=15,-1"
                }
            }
        },
        "models.Login": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "isEmailVerified": {
                    "type": "boolean"
                },
                "isPhoneVerified": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "loginId": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/models.Account"
                },
                "accountId": {
                    "type": "integer"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "login": {
                    "$ref": "#/definitions/models.Login"
                },
                "loginId": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "repository.Balances": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "integer"
                },
                "bankAccountId": {
                    "type": "integer"
                },
                "current": {
                    "type": "integer"
                },
                "expenses": {
                    "type": "integer"
                },
                "goals": {
                    "type": "integer"
                },
                "safe": {
                    "type": "integer"
                }
            }
        },
        "repository.FundingStats": {
            "type": "object",
            "properties": {
                "bankAccountId": {
                    "type": "integer"
                },
                "fundingScheduleId": {
                    "type": "integer"
                },
                "nextExpenseContribution": {
                    "type": "integer"
                },
                "nextGoalContribution": {
                    "type": "integer"
                },
                "numberOfExpenses": {
                    "type": "integer"
                },
                "numberOfGoals": {
                    "type": "integer"
                }
            }
        },
        "swag.AfterCheckoutResponse": {
            "type": "object",
            "properties": {
                "isActive": {
                    "description": "IsActive is used to indicate whether the user's subscription is not properly activated. On the UI this is\npropagated to the redux store to allow access to other application routes. If this is false then the subscription\nis not active and API calls to endpoints requiring payment will still fail.",
                    "type": "boolean"
                },
                "message": {
                    "description": "Message is included if there is a problem. Right now this happens if the checkout session is completed but the\nsubscription associated with that checkout session is not active.\n\n**NOTE:** This field is not included if the subscription is active and the after checkout is successful.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "Subscription is not active"
                },
                "nextUrl": {
                    "description": "NextURL is used to direct the user to a specific page after their checkout has been completed and verified. This\nshould be followed by the web UI. Right now, successful checkouts will redirect to ` + "`" + `/` + "`" + ` which will prompt the user\nto either configure a Plaid link, or will present them with their budgeting data if there already is some.",
                    "type": "string"
                }
            }
        },
        "swag.BalanceResponse": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "The available balance of the account, usually the current balance minus any pending transactions.",
                    "type": "integer",
                    "example": 124000
                },
                "bankAccountId": {
                    "description": "The bank account the balances are for. Balances are only per bank account, and not currently calculated at a link\nor global level.",
                    "type": "integer",
                    "example": 1234
                },
                "current": {
                    "description": "The current balance of the account in cents. This typically excludes pending transaction values.",
                    "type": "integer",
                    "example": 124396
                },
                "expenses": {
                    "description": "The amount allocated to expense spending objects.",
                    "type": "integer",
                    "example": 100000
                },
                "goals": {
                    "description": "The amount allocated to goal spending objects.",
                    "type": "integer",
                    "example": 11650
                },
                "safe": {
                    "description": "The amount left over in the bank account after all expense and goal allocations have been subtracted from the\navailable balance.",
                    "type": "integer",
                    "example": 12350
                }
            }
        },
        "swag.BankAccountResponse": {
            "type": "object",
            "required": [
                "accountSubType",
                "accountType",
                "bankAccountId",
                "linkId"
            ],
            "properties": {
                "accountSubType": {
                    "description": "Sub Type can have numerous values, but given that the application currently only supports depository the most\ncommon values you will see or use are; checking and savings. Other supported types (albeit untested) are; hsa,\ncd, money market, paypal, prepaid, cash management and ebt.\nMore information on these can be found here: https://plaid.com/docs/api/accounts/#account-type-schema",
                    "type": "string",
                    "example": "checking"
                },
                "accountType": {
                    "description": "Account Type can be; depository, credit, loan, investment or other. At the time of writing this the application\nwill only support depository. Other types may be supported in the future.",
                    "type": "string",
                    "example": "depository"
                },
                "availableBalance": {
                    "description": "The balance available in the account represented as whole cents. This is typically the current balance minus the\ntotal value of all pending transactions. This value is not calculated in the API and is retrieved from Plaid or\nmaintained manually for manual links.",
                    "type": "integer",
                    "example": 102356
                },
                "bankAccountId": {
                    "description": "Bank Account ID uniquely identifies this bank account within monetr.",
                    "type": "integer",
                    "example": 85473
                },
                "currentBalance": {
                    "description": "The current balance in the account as whole cents without taking into consideration any pending transactions.",
                    "type": "integer",
                    "example": 102400
                },
                "lastUpdated": {
                    "description": "Last Updated is used to keep track of changes to this specific bank account. It is updated when the balances that\nare provided by an external party (like Plaid) are changed. It is not necessarily changed when the Safe-To-Spend\nbalance changes or when other fields on the bank account change.",
                    "type": "string",
                    "example": "2021-04-15T00:00:00-05:00"
                },
                "linkId": {
                    "description": "The numeric Id of the Link this bank account is associated with, if the link is manual then bank bank accounts\ncan be created manually via the API. If the Link is associated with Plaid though then bank accounts can only be\ncreated through the Plaid interface. At the time of writing this there is not a way to add or remove a bank\naccount from an existing Plaid Link.",
                    "type": "integer",
                    "example": 2345
                },
                "mask": {
                    "description": "Last 4 digits of the bank account's account number. We do not store the full bank account number or any other\nsensitive account information.",
                    "type": "string",
                    "example": "9876"
                },
                "name": {
                    "description": "Name of the account, this is different than the ` + "`" + `originalName` + "`" + `. This field can be changed later on while the\n` + "`" + `originalName` + "`" + ` field cannot be changed once the account is created.",
                    "type": "string",
                    "example": "Checking Account"
                },
                "officialName": {
                    "description": "Official name is only used with bank accounts coming from Plaid. It is another name that Plaid uses for an\naccount.",
                    "type": "string",
                    "example": "US Bank - Checking Account"
                },
                "originalName": {
                    "description": "The original name of the bank account from when it was created. This name cannot be changed after the bank\naccount is created. This is primarily due to bank account's coming from a 3rd party provider like Plaid. But to\nreduce the amount of logic in the application the same rule applies for manual links as well.",
                    "type": "string",
                    "example": "Checking Account #1"
                }
            }
        },
        "swag.ConfigResponse": {
            "type": "object",
            "properties": {
                "ReCAPTCHAKey": {
                    "description": "The public ReCAPTCHA key that should be used by the frontend to verify some requests. Is omitted if ReCAPTCHA is\nnot enabled.",
                    "type": "string",
                    "x-nullable": true
                },
                "allowForgotPassword": {
                    "description": "**WIP** Not currently used. Will be implemented once proper email verification is working. Will also require that\nthe API can send emails to the end user.",
                    "type": "boolean"
                },
                "allowSignUp": {
                    "description": "Tells the UI whether or not registration requests will be accepted by the UI.",
                    "type": "boolean"
                },
                "requireBetaCode": {
                    "description": "Indicates that registration requests will require a one time use beta code in order to be accepted. Beta codes\nmust be generated before hand by an admin.",
                    "type": "boolean"
                },
                "requireLegalName": {
                    "description": "Indicates whether or not the UI should collect just a simple \"firstName\" or should require that the user provide\nboth their first and last name during registration.",
                    "type": "boolean"
                },
                "requirePhoneNumber": {
                    "description": "**WIP** Not currently used. This is meant to be used for doing additional verification of the user's identity to\nstreamline the bank account linking process.",
                    "type": "boolean"
                },
                "stripePublicKey": {
                    "description": "The public key for Stripe, will be used for stripe elements on the frontend. Is omitted if stripe is not enabled.",
                    "type": "string",
                    "x-nullable": true
                },
                "verifyLogin": {
                    "description": "Tells the API client that a ReCAPTCHA verification key will be required for login API calls.",
                    "type": "boolean"
                },
                "verifyRegister": {
                    "description": "Tells the API client that a ReCAPTCHA verification key will be required for registering a new user.",
                    "type": "boolean"
                }
            }
        },
        "swag.CreateBankAccountRequest": {
            "type": "object",
            "required": [
                "accountSubType",
                "accountType",
                "linkId"
            ],
            "properties": {
                "accountSubType": {
                    "description": "Sub Type can have numerous values, but given that the application currently only supports depository the most\ncommon values you will see or use are; checking and savings. Other supported types (albeit untested) are; hsa,\ncd, money market, paypal, prepaid, cash management and ebt.\nMore information on these can be found here: https://plaid.com/docs/api/accounts/#account-type-schema",
                    "type": "string",
                    "example": "checking"
                },
                "accountType": {
                    "description": "Account Type can be; depository, credit, loan, investment or other. At the time of writing this the application\nwill only support depository. Other types may be supported in the future.",
                    "type": "string",
                    "example": "depository"
                },
                "availableBalance": {
                    "description": "The balance available in the account represented as whole cents. This is typically the current balance minus the\ntotal value of all pending transactions. This value is not calculated in the API and is retrieved from Plaid or\nmaintained manually for manual links.",
                    "type": "integer",
                    "example": 102356
                },
                "currentBalance": {
                    "description": "The current balance in the account as whole cents without taking into consideration any pending transactions.",
                    "type": "integer",
                    "example": 102400
                },
                "linkId": {
                    "description": "The numeric Id of the Link this bank account is associated with, if the link is manual then bank bank accounts\ncan be created manually via the API. If the Link is associated with Plaid though then bank accounts can only be\ncreated through the Plaid interface. At the time of writing this there is not a way to add or remove a bank\naccount from an existing Plaid Link.",
                    "type": "integer",
                    "example": 2345
                },
                "mask": {
                    "description": "Last 4 digits of the bank account's account number. We do not store the full bank account number or any other\nsensitive account information.",
                    "type": "string",
                    "example": "9876"
                },
                "name": {
                    "description": "Name of the account, this is different than the ` + "`" + `originalName` + "`" + `. This field can be changed later on while the\n` + "`" + `originalName` + "`" + ` field cannot be changed once the account is created.",
                    "type": "string",
                    "example": "Checking Account"
                },
                "officialName": {
                    "description": "Official name is only used with bank accounts coming from Plaid. It is another name that Plaid uses for an\naccount.",
                    "type": "string",
                    "example": "US Bank - Checking Account"
                },
                "originalName": {
                    "description": "The original name of the bank account from when it was created. This name cannot be changed after the bank\naccount is created. This is primarily due to bank account's coming from a 3rd party provider like Plaid. But to\nreduce the amount of logic in the application the same rule applies for manual links as well.",
                    "type": "string",
                    "example": "Checking Account #1"
                }
            }
        },
        "swag.CreateCheckoutSessionRequest": {
            "type": "object",
            "properties": {
                "cancelPath": {
                    "description": "The path that the user should be returned to if they exit the checkout session.",
                    "type": "string"
                },
                "priceId": {
                    "description": "Specify a specific Stripe Price ID to be used when creating the checkout session. If this is left blank then\nthe default price will be used for the checkout session.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "price_1JFQFuI4uGGnwpgwquHOo34s"
                }
            }
        },
        "swag.CreateCheckoutSessionResponse": {
            "type": "object",
            "properties": {
                "sessionId": {
                    "description": "The value returned from stripe once a checkout session has been created. This is used on the frontend for the\nuser to checkout and pay for their chosen plan.",
                    "type": "string"
                }
            }
        },
        "swag.CreateLinkRequest": {
            "type": "object",
            "required": [
                "institutionName"
            ],
            "properties": {
                "institutionName": {
                    "description": "Specify the institution name for the manual link. When created by the UI this will default to ` + "`" + `Manual` + "`" + ` and then\nany bank account's created that are manual will automatically be created for this link. Technically a link can\nbe created with any name at the moment, but this is meant to be a basic initial implementation for now.",
                    "type": "string",
                    "example": "Manual"
                }
            }
        },
        "swag.CreatePortalSessionResponse": {
            "type": "object",
            "properties": {
                "url": {
                    "description": "The URL returned by Stripe for the customer's billing portal.",
                    "type": "string"
                }
            }
        },
        "swag.HealthResponse": {
            "type": "object",
            "properties": {
                "apiHealthy": {
                    "description": "This will always be true. If the API is not healthy then an error is returned to the client or the request will\nsimply not be served.",
                    "type": "boolean"
                },
                "buildTime": {
                    "description": "The time the current REST API executable was built. Typically when the container build was initiated.",
                    "type": "string"
                },
                "dbHealthy": {
                    "description": "Indicates whether or not the current API process handling the request can communicate with the PostgreSQL\ndatabase.",
                    "type": "boolean"
                },
                "release": {
                    "description": "Release is only present when a deployment was run for a specific tag. This is only found in acceptance and\nproduction.",
                    "type": "string",
                    "x-nullable": true
                },
                "revision": {
                    "description": "The Git SHA code for the commit of the deployed REST API.",
                    "type": "string"
                }
            }
        },
        "swag.LinkResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "The timestamp the link was created in UTC. This cannot be modified by the end user.",
                    "type": "string",
                    "example": "2021-05-18T00:26:10.873089Z"
                },
                "createdByUserId": {
                    "description": "The unique user Id of the user who created this link. If that user is deleted then any links that that user\ncreated are also deleted. In an \"ownership\" sort of way. If a user links their bank account and has that shared\nwith someone else; but then the user deletes their user. We do not want the other user to still have access to\nthe linked bank account.",
                    "type": "integer",
                    "example": 94832
                },
                "customInstitutionName": {
                    "description": "A custom name for the link's institution that can be set by the end user. Once a link is created the institution\nname cannot be changed directly. But the custom institution name can.",
                    "type": "string",
                    "example": "US Bank"
                },
                "errorCode": {
                    "description": "If the link error is due to a problem on Plaid's side, then an error code will be included here to help display\nhelpful messages on the frontend to the user.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "NO_ACCOUNTS"
                },
                "institutionId": {
                    "description": "Our internal Id for an institution. This is just an abstraction layer on top of Plaid's institution Id but would\nallow us to associate institutions with multiple integrations in the future. It is also meant to keep Plaid Id's\naway from the client's view as much as possible.",
                    "type": "integer",
                    "x-nullable": true,
                    "example": 5328
                },
                "institutionName": {
                    "description": "The institution name for this link. With the Plaid integration, each link represents a single bank account login\nwith an institution. So if you link your monetr account with your U.S. Bank account you would have one link for\nU.S. Bank, and your accounts with that bank would show as bank account's under that link. Manual links are\nintended to be a single \"Manual\" link per account, with any manually managed bank accounts underneath it.",
                    "type": "string",
                    "example": "U.S. Bank"
                },
                "lastSuccessfulUpdate": {
                    "description": "The last time transactions were successfully retrieved for this link. This date does not indicate the most recent\ntransaction retrieved, simply the most recent attempt to retrieve transactions that was successful.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "2021-05-21T05:24:12.958309Z"
                },
                "linkId": {
                    "description": "Our unique identifier for a link. This is globally unique across all accounts.",
                    "type": "integer",
                    "example": 1245
                },
                "linkStatus": {
                    "description": "Status of a link, this is used with the Plaid integration to determine whether or not a link has been completely\nsetup. If a link is in an Unknown or Pending state then the link has not had it's transactions retrieved yet from\nPlaid. Unknown might indicate there is a problem with the link itself.\n* 0 - ` + "`" + `Unknown` + "`" + `: Indicates the link is not setup or ready to use, might also indicate there is a problem with the link.\n* 1 - ` + "`" + `Pending` + "`" + `: The link is not ready to use and is being setup by the Plaid integration.\n* 2 - ` + "`" + `Setup` + "`" + `: The link is ready to use. This is the default state for manual links.\n* 3 - ` + "`" + `Error` + "`" + `: The link is in an error state, this can happen if the Plaid link is experiencing problems.",
                    "type": "integer",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "example": 2
                },
                "linkType": {
                    "description": "The type of link this object is. This indicates whether or not bank accounts within this link are managed\nmanually by an end user, or managed automatically by a Plaid integration.\n* 0 - ` + "`" + `Unknown` + "`" + `: This would indicate an error state with the link.\n* 1 - ` + "`" + `Plaid` + "`" + `: This link is automatically managed by the Plaid integration.\n* 2 - ` + "`" + `Manual` + "`" + `: This link is managed manually by the end user.",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ],
                    "example": 2
                },
                "updatedAt": {
                    "description": "The last time this link was updated. Currently this field is not really maintained, eventually this timestamp\nwill indicate the last time a sync occurred between monetr and Plaid. Manual links don't change this field at\nall. **OLD**",
                    "type": "string",
                    "example": "2021-05-21T05:24:12.958309Z"
                },
                "updatedByUserId": {
                    "description": "The user who last updated this link. Currently this field is not maintained well and should not be trusted.",
                    "type": "integer",
                    "x-nullable": true,
                    "example": 89547
                }
            }
        },
        "swag.LoginRequest": {
            "type": "object",
            "properties": {
                "captcha": {
                    "description": "ReCAPTCHA value from validation. Required if ` + "`" + `verifyLogin` + "`" + ` is enabled on the server.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "03AGdBq266UHyZ62gfKGJozRNQz17oIhSlj9S9S..."
                },
                "email": {
                    "description": "The email associated with our login. Is unique and case-insensitive.",
                    "type": "string",
                    "example": "your.email@gmail.com"
                },
                "password": {
                    "description": "Your login password.",
                    "type": "string",
                    "example": "tHEBeSTPaSsWOrdYoUCaNCOmeUpWiTH"
                }
            }
        },
        "swag.LoginResponse": {
            "type": "object",
            "properties": {
                "isActive": {
                    "description": "Indicates whether or not the user that has been authenticated has an active subscription. The UI will use this to\nredirect the user to a payment page if their subscription is not active. If this field is not present then\nbilling is either not enabled. Or the user's subscription is active and no action needs to be taken.",
                    "type": "boolean",
                    "x-nullable": true,
                    "example": true
                },
                "nextUrl": {
                    "description": "Next URL is provided by the API if the user needs to be redirected immediately after authenticating. This is used\nin conjunction with the ` + "`" + `isActive` + "`" + ` field for directing users to the payment page gracefully. If this field is not\npresent then billing is either not enabled. Or the user's subscription is active and no action needs to be taken.\nIt is possible that this field may be used in the future independent of ` + "`" + `isActive` + "`" + ` so logic should be build for\nit regardless of the ` + "`" + `isActive` + "`" + ` field's presence.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "/account/subscribe"
                },
                "token": {
                    "description": "A JWT that can be used to make authenticated requests for the user.",
                    "type": "string",
                    "example": "eyJhbGciOiJI..."
                }
            }
        },
        "swag.NewPlaidTokenCallbackRequest": {
            "type": "object",
            "properties": {
                "accountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "KEdQjMo39lFwXKqKLlqEt6R3AgBWW1C6l8vDn",
                        "r3DVlexNymfJkgZgonZeSQ4n5Koqqjtyrwvkp"
                    ]
                },
                "institutionId": {
                    "type": "string",
                    "example": "ins_117212"
                },
                "institutionName": {
                    "type": "string",
                    "example": "Navy Federal Credit Union"
                },
                "publicToken": {
                    "type": "string"
                }
            }
        },
        "swag.NewSpendingRequest": {
            "type": "object",
            "required": [
                "bankAccountId",
                "fundingScheduleId",
                "name",
                "spendingType",
                "targetAmount"
            ],
            "properties": {
                "bankAccountId": {
                    "description": "Indicates which bank account the spending object is associated with. All spending objects must be associated with\none bank account. This value cannot be changed. It can only be set when the spending object is created.",
                    "type": "integer",
                    "example": 8437
                },
                "description": {
                    "description": "Currently used as a description of the recurrence rule so that it does not need to be \"generated\" with each\npattern. This is not intended to be used by the end user and is generated by the UI when the spending object is\ncreated or updated. However it can be modified if you were to send this request manually. It has no side affects,\nit is simply used to better display data to the end user at this time.",
                    "type": "string",
                    "example": "1st of every month"
                },
                "fundingScheduleId": {
                    "description": "The desired funding schedule of the spending. Changing this will trigger a recalculation of the spending object.",
                    "type": "integer",
                    "example": 8539
                },
                "isPaused": {
                    "description": "Indicate whether or not this spending object should receive contributions on it's funding schedule occurrence. If\nthe spending object is paused, the next time its funding schedule occurs, no additional amount will be allocated\nto this spending object.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Human friendly name of the spending object. Something like \"Amazon Prime\". But can be anything.",
                    "type": "string",
                    "example": "Amazon Prime"
                },
                "nextRecurrence": {
                    "description": "The next time this expense or goal is due. For expenses this date is recalculated each time this date passes.\nFor goals this date is somewhat static. It can be modified but is not automatically recalculated once it is\nreached. Changing this date would recalculate contributions to this spending object. These dates should be\nprovided in RFC3339 format with the timezone of the client included. The timezone is important as its used to\ncalculate the next time this expense recurs.",
                    "type": "string",
                    "example": "2021-05-01T00:00:00-05:00"
                },
                "recurrenceRule": {
                    "description": "Recurrence rule telling the budgeting system how often this expense should be used. This helps the budgeting\nsystem recalculate the next recurrence date each time an expense's recurrence date is reached. More information\nabout the format of the rule can be found here: https://tools.ietf.org/html/rfc5545\nNote: These rules should be provided with the ` + "`" + `RRULE:` + "`" + ` prefix omitted if the tool you are using to generate the\nrule strings include it. These rules are parsed using this library: https://github.com/teambition/rrule-go\nChanging this rule would recalculate contributions to this spending object.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "FREQ=MONTHLY;BYMONTHDAY=1"
                },
                "spendingType": {
                    "description": "The type of spending object this is. This cannot be changed. It can only be set when the spending object is created.\n* 0 - Expense, the object will occur on a regular basis based on its recurrence rule. Spending from an expense will always change its next allocation amount.\n* 1 - Goal, the object will allocate until it reaches it's target value and then stop. It can be spent from while it is still incomplete without changing the allocation amount.",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ],
                    "example": 0
                },
                "targetAmount": {
                    "description": "How much the spending object should allocate by the next recurrence date. For goals this target is reached once\nand is considered complete, even if part of the total amount has been spent. For expenses this amount is\nattempted to be allocated before the recurrence date regardless of spending. This means that even if a\ntransaction is spent from this spending object the allocation system will still allocate more funds to this\nexpense if the transaction was spent before it is technically due AND the funding schedule occurs before the\nspecified next recurrence date. Changing this amount will recalculate contributions to this spending object.",
                    "type": "integer",
                    "minimum": 1,
                    "example": 1395
                }
            }
        },
        "swag.PlaidNewLinkTokenResponse": {
            "type": "object",
            "properties": {
                "linkToken": {
                    "description": "The link token that will be used for the end user to authenticate to their bank using plaid. These tokens do\nexpire. They are also specific to a single environment. See: https://plaid.com/docs/api/tokens/#linktokencreate",
                    "type": "string",
                    "example": "link-environment-6da2c37f-6aa0...."
                }
            }
        },
        "swag.PlaidTokenCallbackResponse": {
            "type": "object",
            "properties": {
                "jobId": {
                    "description": "If webhooks are not enabled then a job Id is returned with the response. This job Id can also be used to check\nfor initial transactions being retrieved.",
                    "type": "string",
                    "x-nullable": true
                },
                "linkId": {
                    "description": "LinkId will always be included in a successful response. It can be used when webhooks are enabled to wait for the\ninitial transactions to be retrieved.",
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "swag.RegisterRequest": {
            "type": "object",
            "properties": {
                "betaCode": {
                    "description": "A beta code given to you to test or demo the application. This is primarily used in an environment where it would\ncost money to link a bank account with a user. But testing against real bank accounts is necessary. So to prevent\nanyone just creating accounts and linking their bank account for free, we use beta codes to verify that they are\nsomeone who is supposed to be there. Leave this null or don't include at all if it is not required by the API\nconfiguration.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "F2917D98-024633A8"
                },
                "captcha": {
                    "description": "ReCAPTCHA value from validation. Required if ` + "`" + `verifyRegistration` + "`" + ` is enabled on the server.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "03AGdBq266UHyZ62gfKGJozRNQz17oIhSlj9S9S..."
                },
                "email": {
                    "description": "The email address you want to have associated with your login and user. This is only used for verification\npurposes like resetting a forgotten password. Or for billing. You are **never** added to any mailing list here.",
                    "type": "string",
                    "example": "your.email@yahoo.com"
                },
                "firstName": {
                    "description": "Your first name. Currently required for registration but might be able to make it optional in the future for\nmanual only registrations (not plaid linked). And people who are on a free trial.",
                    "type": "string",
                    "example": "Doug"
                },
                "lastName": {
                    "description": "Your last name or \"family\" name. Whether or not this is required depends on the plaid configuration, when we are\nlinking bank accounts to users we do need the user's full legal name.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "Dimmadome"
                },
                "password": {
                    "description": "Your desired login password.",
                    "type": "string",
                    "example": "tHEBeSTPaSsWOrdYoUCaNCOmeUpWiTH"
                },
                "timezone": {
                    "description": "Your timezone in the \"TZ Database Name\" format. This is used for determining when midnight is for funding\nschedules to be processed for your account.",
                    "type": "string",
                    "example": "America/Chicago"
                }
            }
        },
        "swag.RegisterResponse": {
            "type": "object",
            "properties": {
                "nextUrl": {
                    "description": "This is a work in progress field, the end goal being that the API could easily direct the UI to different steps\nbased on the state of a user. If they require MFA then direct them to an MFA screen. If their subscription is\nexpired direct them to a subscription screen. But at the moment it is not used.",
                    "type": "string",
                    "example": "/setup"
                },
                "token": {
                    "description": "A JWT that can be used to make authenticated requests for the newly created user.",
                    "type": "string",
                    "example": "eyJhbGciOiJI..."
                },
                "user": {
                    "description": "The created user and some basic information. This allows the UI to skip an API call to the /users/me endpoint.",
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "swag.SpendingResponse": {
            "type": "object",
            "required": [
                "bankAccountId",
                "fundingScheduleId",
                "fundingScheduleId",
                "name",
                "name",
                "spendingId",
                "spendingType",
                "targetAmount",
                "targetAmount"
            ],
            "properties": {
                "bankAccountId": {
                    "description": "Indicates which bank account the spending object is associated with. All spending objects must be associated with\none bank account. This value cannot be changed. It can only be set when the spending object is created.",
                    "type": "integer",
                    "example": 8437
                },
                "currentAmount": {
                    "description": "The amount that has been allocated to the spending object. This amount is deducted from the available balance of\nthe bank account the spending object is associated with. It can be modified by spending a transaction from a\nspending object. Or by transferring/allocating funds to a spending object. It cannot be modified directly.",
                    "type": "integer",
                    "example": 1395
                },
                "dateCreated": {
                    "description": "When the spending object was initially created. This value cannot be changed.",
                    "type": "string",
                    "example": "2021-04-04T12:43:23-05:00"
                },
                "description": {
                    "description": "Currently used as a description of the recurrence rule so that it does not need to be \"generated\" with each\npattern. This is not intended to be used by the end user and is generated by the UI when the spending object is\ncreated or updated. However it can be modified if you were to send this request manually. It has no side affects,\nit is simply used to better display data to the end user at this time.",
                    "type": "string",
                    "example": "1st of every month"
                },
                "fundingScheduleId": {
                    "description": "The desired funding schedule of the spending. Changing this will trigger a recalculation of the spending object.",
                    "type": "integer",
                    "example": 8539
                },
                "isBehind": {
                    "description": "If a spending object cannot reach its ` + "`" + `targetAmount` + "`" + ` by the date that it is due on its funding schedule alone,\nthen the spending object is marked as \"behind\". This means that without manually transferring funds to the\nspending object it will not have enough funds to fulfill its target by the due date. This value is calculated\nautomatically and cannot be changed.",
                    "type": "boolean",
                    "example": false
                },
                "isPaused": {
                    "description": "Indicate whether or not this spending object should receive contributions on it's funding schedule occurrence. If\nthe spending object is paused, the next time its funding schedule occurs, no additional amount will be allocated\nto this spending object.",
                    "type": "boolean"
                },
                "lastRecurrence": {
                    "description": "The last time this spending object reset. A spending object is reset each time its ` + "`" + `nextRecurrence` + "`" + ` date elapses,\nthe ` + "`" + `nextRecurrence` + "`" + ` date is then moved to this field. This field is null if a spending object has never elapsed\nbefore. Or if the spending object is a goal. This field is maintained automatically and cannot be modified.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "2021-04-15T00:00:00-05:00"
                },
                "name": {
                    "description": "Human friendly name of the spending object. Something like \"Amazon Prime\". But can be anything.",
                    "type": "string",
                    "example": "Amazon Prime"
                },
                "nextRecurrence": {
                    "description": "The next time this expense or goal is due. For expenses this date is recalculated each time this date passes.\nFor goals this date is somewhat static. It can be modified but is not automatically recalculated once it is\nreached. Changing this date would recalculate contributions to this spending object. These dates should be\nprovided in RFC3339 format with the timezone of the client included. The timezone is important as its used to\ncalculate the next time this expense recurs.",
                    "type": "string",
                    "example": "2021-05-01T00:00:00-05:00"
                },
                "recurrenceRule": {
                    "description": "Recurrence rule telling the budgeting system how often this expense should be used. This helps the budgeting\nsystem recalculate the next recurrence date each time an expense's recurrence date is reached. More information\nabout the format of the rule can be found here: https://tools.ietf.org/html/rfc5545\nNote: These rules should be provided with the ` + "`" + `RRULE:` + "`" + ` prefix omitted if the tool you are using to generate the\nrule strings include it. These rules are parsed using this library: https://github.com/teambition/rrule-go\nChanging this rule would recalculate contributions to this spending object.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "FREQ=MONTHLY;BYMONTHDAY=1"
                },
                "spendingId": {
                    "description": "The spending Id of the goal or expense that you are updating.",
                    "type": "integer",
                    "example": 4364
                },
                "spendingType": {
                    "description": "The type of spending object this is. This cannot be changed. It can only be set when the spending object is created.\n* 0 - Expense, the object will occur on a regular basis based on its recurrence rule. Spending from an expense will always change its next allocation amount.\n* 1 - Goal, the object will allocate until it reaches it's target value and then stop. It can be spent from while it is still incomplete without changing the allocation amount.",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ],
                    "example": 0
                },
                "targetAmount": {
                    "description": "How much the spending object should allocate by the next recurrence date. For goals this target is reached once\nand is considered complete, even if part of the total amount has been spent. For expenses this amount is\nattempted to be allocated before the recurrence date regardless of spending. This means that even if a\ntransaction is spent from this spending object the allocation system will still allocate more funds to this\nexpense if the transaction was spent before it is technically due AND the funding schedule occurs before the\nspecified next recurrence date. Changing this amount will recalculate contributions to this spending object.",
                    "type": "integer",
                    "minimum": 1,
                    "example": 1395
                },
                "usedAmount": {
                    "description": "Used amount is only valid for goals at this time. It indicates how much has been spent from the spending object,\nand is used to keep track of the goal's progress to its target without affecting the accuracy of the\n` + "`" + `currentAmount` + "`" + ` field. A goal is complete when the ` + "`" + `currentAmount` + "`" + ` + ` + "`" + `usedAmount` + "`" + ` = ` + "`" + `targetAmount` + "`" + `.",
                    "type": "integer",
                    "example": 1043
                }
            }
        },
        "swag.TransactionResponse": {
            "type": "object",
            "required": [
                "amount",
                "amount",
                "bankAccountId",
                "originalName",
                "transactionId"
            ],
            "properties": {
                "amount": {
                    "description": "The amount of the transaction in cents. This is used when a transaction is \"spent-from\" a spending object.Validate\n\n**NOTE**: ` + "`" + `amount` + "`" + ` cannot be updated on transactions that were created from Plaid.",
                    "type": "integer",
                    "minimum": 1
                },
                "authorizedDate": {
                    "description": "Authorized date comes from Plaid, but to my knowledge will not be populated in this API until we support UK\nbanks.\n\u003e This field is only populated for UK institutions. For institutions in other countries, will be null.\n\nhttps://plaid.com/docs/api/products/#transactions-get-response-authorized-datetime_transactions\n\n**NOTE**: ` + "`" + `authorizedDate` + "`" + ` cannot be updated on transactions that were created from Plaid.",
                    "type": "string",
                    "x-nullable": true
                },
                "bankAccountId": {
                    "description": "The Id of bank account that this transaction is associated with. A transaction can only be associated with a\nsingle bank account. It is required when creating a new transaction.",
                    "type": "integer",
                    "example": 43872
                },
                "categories": {
                    "description": "Represents a path of categories that represents what type of spending this transaction was. For example:\n` + "`" + `[\"Restaurants\", \"Fast Food\"]` + "`" + `. A transaction could just have the category of ` + "`" + `Restaurants` + "`" + `, but it can have a\nchild category of ` + "`" + `Fast Food` + "`" + ` as well. This field can be maintained directly by the end user. But is typically\ngenerated when the transaction is created from Plaid.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-nullable": true,
                    "example": [
                        "Restaurants",
                        "Fast Food"
                    ]
                },
                "createdAt": {
                    "description": "Specifies the timestamp that the transaction was created within monetr and is used to help sort transactions as\nthe transaction ` + "`" + `date` + "`" + ` does not contain a time of day.",
                    "type": "string",
                    "example": "2021-04-15T00:00:00-05:00"
                },
                "date": {
                    "description": "Date is the date the transaction was created. This date cannot change on this particular transaction Id, but if\nthe transaction is in a ` + "`" + `Pending` + "`" + ` state then when the transaction clears a new transaction can be created and\nthis transaction would be deleted. This can change the ` + "`" + `date` + "`" + ` field when this occurs.\n\n**NOTE**: ` + "`" + `date` + "`" + ` cannot be updated on transactions that were created from Plaid.",
                    "type": "string",
                    "example": "2021-04-15T00:00:00-05:00"
                },
                "isPending": {
                    "description": "Indicates whether or not the transaction is pending. Pending transactions are deleted when they clear their\npending status and if the transaction completes, a new transaction with a non-pending status is created. If the\ntransaction clears its pending status but is not complete (refunded), then it is simply deleted. This is only\nthe case with Plaid transactions, manual transactions can be updated between pending and non-pending in place.\n\n**NOTE**: ` + "`" + `isPending` + "`" + ` cannot be updated on transactions that were created from Plaid.",
                    "type": "boolean",
                    "example": true
                },
                "merchantName": {
                    "description": "The merchant name that was specified by the user, or was imported with the transaction's data from Plaid.",
                    "type": "string"
                },
                "name": {
                    "description": "The transaction name that the user has customized, or that has been generated by monetr when the transaction was\nimported from Plaid.",
                    "type": "string"
                },
                "originalCategories": {
                    "description": "Original categories from when the transaction was created by the user, or imported from Plaid. this field cannot\nbe changed after the transaction has been created.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-nullable": true,
                    "example": [
                        "Restaurants",
                        "Fast Food"
                    ]
                },
                "originalMerchantName": {
                    "description": "Original merchant name is immutable. It can only be set when the transaction is created. This is used to preserve\nsome data about the original transaction and is primarily used by the Plaid integration. It is not required for\nmanually created transactions.",
                    "type": "string",
                    "example": "Uber"
                },
                "originalName": {
                    "description": "The original name of the transaction when it was created. This is the name specified when the user manually\ncreated the transaction, or when the transaction was imported from Plaid. This field cannot be changed after the\ntransaction is created.",
                    "type": "string",
                    "example": "Uber 072515 SF**POOL**"
                },
                "spendingAmount": {
                    "description": "SpendingAmount is the amount deducted from the expense this transaction was spent from. This is used when a\ntransaction is more than the expense currently has allocated. If the transaction were to be deleted or changed we\nwant to make sure we return the correct amount to the expense.",
                    "type": "integer",
                    "x-nullable": true,
                    "example": 800
                },
                "spendingId": {
                    "description": "The expense or goal's spending Id that this transaction was spent from. When this is updated the spending amount\nwill also be updated here. On the spending object the allocated amount will be subtracted from up to the amount\nof this transaction. But the spending objects allocated amount will never be negative. If you have a transaction\nthat is $10.00 and you spend it from a spending object with only $8.00 allocated, then only $8.00 will be\nsubtracted from the spending object. Those $8.00 will be represented by the ` + "`" + `spendingAmount` + "`" + ` field here.",
                    "type": "integer",
                    "x-nullable": true,
                    "example": 54312
                },
                "transactionId": {
                    "description": "The unique Id for the transaction within monetr. This is globally unique.",
                    "type": "integer",
                    "example": 58732
                }
            }
        },
        "swag.TransactionUpdateResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "The new balances for the bank account that the transaction belongs to. This is returned so that the UI can easily\nsee the affects of updating a transaction's spending object right away.",
                    "$ref": "#/definitions/swag.BalanceResponse"
                },
                "transaction": {
                    "description": "The resulting transaction object with any calculated changes applied.",
                    "$ref": "#/definitions/swag.TransactionResponse"
                },
                "updatedExpenses": {
                    "description": "Will contain up to two spending objects. Includes the spending objects that were updated if the ` + "`" + `spendingId` + "`" + `\nfield of the transaction was changed in the request.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/swag.SpendingResponse"
                    }
                }
            }
        },
        "swag.TransferResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "The balance of the bank account after the transferred allocations have been recalculated.",
                    "$ref": "#/definitions/swag.BalanceResponse"
                },
                "spending": {
                    "description": "An array of spending objects that were updated during the transfer. By persisting these to the client's memory\nthe state of the spending objects is properly maintained.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/swag.SpendingResponse"
                    }
                }
            }
        },
        "swag.UpdateLinkRequest": {
            "type": "object",
            "properties": {
                "customInstitutionName": {
                    "description": "A custom name for the link's institution that can be set by the end user. Once a link is created the institution\nname cannot be changed directly. But the custom institution name can.",
                    "type": "string",
                    "example": "US Bank"
                }
            }
        },
        "swag.UpdatePlaidTokenCallbackRequest": {
            "type": "object",
            "properties": {
                "linkId": {
                    "type": "integer"
                },
                "publicToken": {
                    "type": "string"
                }
            }
        },
        "swag.UpdateSpendingRequest": {
            "type": "object",
            "required": [
                "fundingScheduleId",
                "name",
                "spendingId",
                "targetAmount"
            ],
            "properties": {
                "description": {
                    "description": "Currently used as a description of the recurrence rule so that it does not need to be \"generated\" with each\npattern. This is not intended to be used by the end user and is generated by the UI when the spending object is\ncreated or updated. However it can be modified if you were to send this request manually. It has no side affects,\nit is simply used to better display data to the end user at this time.",
                    "type": "string",
                    "example": "1st of every month"
                },
                "fundingScheduleId": {
                    "description": "The desired funding schedule of the spending. Changing this will trigger a recalculation of the spending object.",
                    "type": "integer",
                    "example": 8539
                },
                "isPaused": {
                    "description": "Indicate whether or not this spending object should receive contributions on it's funding schedule occurrence. If\nthe spending object is paused, the next time its funding schedule occurs, no additional amount will be allocated\nto this spending object.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Human friendly name of the spending object. Something like \"Amazon Prime\". But can be anything.",
                    "type": "string",
                    "example": "Amazon Prime"
                },
                "nextRecurrence": {
                    "description": "The next time this expense or goal is due. For expenses this date is recalculated each time this date passes.\nFor goals this date is somewhat static. It can be modified but is not automatically recalculated once it is\nreached. Changing this date would recalculate contributions to this spending object. These dates should be\nprovided in RFC3339 format with the timezone of the client included. The timezone is important as its used to\ncalculate the next time this expense recurs.",
                    "type": "string",
                    "example": "2021-05-01T00:00:00-05:00"
                },
                "recurrenceRule": {
                    "description": "Recurrence rule telling the budgeting system how often this expense should be used. This helps the budgeting\nsystem recalculate the next recurrence date each time an expense's recurrence date is reached. More information\nabout the format of the rule can be found here: https://tools.ietf.org/html/rfc5545\nNote: These rules should be provided with the ` + "`" + `RRULE:` + "`" + ` prefix omitted if the tool you are using to generate the\nrule strings include it. These rules are parsed using this library: https://github.com/teambition/rrule-go\nChanging this rule would recalculate contributions to this spending object.",
                    "type": "string",
                    "x-nullable": true,
                    "example": "FREQ=MONTHLY;BYMONTHDAY=1"
                },
                "spendingId": {
                    "description": "The spending Id of the goal or expense that you are updating.",
                    "type": "integer",
                    "example": 4364
                },
                "targetAmount": {
                    "description": "How much the spending object should allocate by the next recurrence date. For goals this target is reached once\nand is considered complete, even if part of the total amount has been spent. For expenses this amount is\nattempted to be allocated before the recurrence date regardless of spending. This means that even if a\ntransaction is spent from this spending object the allocation system will still allocate more funds to this\nexpense if the transaction was spent before it is technically due AND the funding schedule occurs before the\nspecified next recurrence date. Changing this amount will recalculate contributions to this spending object.",
                    "type": "integer",
                    "minimum": 1,
                    "example": 1395
                }
            }
        },
        "swag.UpdateTransactionRequest": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "description": "The amount of the transaction in cents. This is used when a transaction is \"spent-from\" a spending object.Validate\n\n**NOTE**: ` + "`" + `amount` + "`" + ` cannot be updated on transactions that were created from Plaid.",
                    "type": "integer",
                    "minimum": 1
                },
                "authorizedDate": {
                    "description": "Authorized date comes from Plaid, but to my knowledge will not be populated in this API until we support UK\nbanks.\n\u003e This field is only populated for UK institutions. For institutions in other countries, will be null.\n\nhttps://plaid.com/docs/api/products/#transactions-get-response-authorized-datetime_transactions\n\n**NOTE**: ` + "`" + `authorizedDate` + "`" + ` cannot be updated on transactions that were created from Plaid.",
                    "type": "string",
                    "x-nullable": true
                },
                "categories": {
                    "description": "Represents a path of categories that represents what type of spending this transaction was. For example:\n` + "`" + `[\"Restaurants\", \"Fast Food\"]` + "`" + `. A transaction could just have the category of ` + "`" + `Restaurants` + "`" + `, but it can have a\nchild category of ` + "`" + `Fast Food` + "`" + ` as well. This field can be maintained directly by the end user. But is typically\ngenerated when the transaction is created from Plaid.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-nullable": true,
                    "example": [
                        "Restaurants",
                        "Fast Food"
                    ]
                },
                "date": {
                    "description": "Date is the date the transaction was created. This date cannot change on this particular transaction Id, but if\nthe transaction is in a ` + "`" + `Pending` + "`" + ` state then when the transaction clears a new transaction can be created and\nthis transaction would be deleted. This can change the ` + "`" + `date` + "`" + ` field when this occurs.\n\n**NOTE**: ` + "`" + `date` + "`" + ` cannot be updated on transactions that were created from Plaid.",
                    "type": "string",
                    "example": "2021-04-15T00:00:00-05:00"
                },
                "isPending": {
                    "description": "Indicates whether or not the transaction is pending. Pending transactions are deleted when they clear their\npending status and if the transaction completes, a new transaction with a non-pending status is created. If the\ntransaction clears its pending status but is not complete (refunded), then it is simply deleted. This is only\nthe case with Plaid transactions, manual transactions can be updated between pending and non-pending in place.\n\n**NOTE**: ` + "`" + `isPending` + "`" + ` cannot be updated on transactions that were created from Plaid.",
                    "type": "boolean",
                    "example": true
                },
                "merchantName": {
                    "description": "The merchant name that was specified by the user, or was imported with the transaction's data from Plaid.",
                    "type": "string"
                },
                "name": {
                    "description": "The transaction name that the user has customized, or that has been generated by monetr when the transaction was\nimported from Plaid.",
                    "type": "string"
                },
                "spendingId": {
                    "description": "The expense or goal's spending Id that this transaction was spent from. When this is updated the spending amount\nwill also be updated here. On the spending object the allocated amount will be subtracted from up to the amount\nof this transaction. But the spending objects allocated amount will never be negative. If you have a transaction\nthat is $10.00 and you spend it from a spending object with only $8.00 allocated, then only $8.00 will be\nsubtracted from the spending object. Those $8.00 will be represented by the ` + "`" + `spendingAmount` + "`" + ` field here.",
                    "type": "integer",
                    "x-nullable": true,
                    "example": 54312
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "M-Token",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Funding Schedules are created by the user to tell us when money should be taken from their account to fund their goals and expenses.",
            "name": "Funding Schedules"
        }
    ]
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0",
	Host:        "api.monetr.app",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "monetr's REST API",
	Description: "This is the REST API for our budgeting application.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
