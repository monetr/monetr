// Code generated by MockGen. DO NOT EDIT.
// Source: teller.go

// Package mockgenteller is a generated GoMock package.
package mockgenteller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	teller "github.com/monetr/monetr/server/teller"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAuthenticatedClient mocks base method.
func (m *MockClient) GetAuthenticatedClient(accessToken string) teller.AuthenticatedClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatedClient", accessToken)
	ret0, _ := ret[0].(teller.AuthenticatedClient)
	return ret0
}

// GetAuthenticatedClient indicates an expected call of GetAuthenticatedClient.
func (mr *MockClientMockRecorder) GetAuthenticatedClient(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatedClient", reflect.TypeOf((*MockClient)(nil).GetAuthenticatedClient), accessToken)
}

// GetHealth mocks base method.
func (m *MockClient) GetHealth(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealth", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetHealth indicates an expected call of GetHealth.
func (mr *MockClientMockRecorder) GetHealth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealth", reflect.TypeOf((*MockClient)(nil).GetHealth), ctx)
}

// GetInstitutions mocks base method.
func (m *MockClient) GetInstitutions(ctx context.Context) ([]teller.Institution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstitutions", ctx)
	ret0, _ := ret[0].([]teller.Institution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstitutions indicates an expected call of GetInstitutions.
func (mr *MockClientMockRecorder) GetInstitutions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstitutions", reflect.TypeOf((*MockClient)(nil).GetInstitutions), ctx)
}

// MockAuthenticatedClient is a mock of AuthenticatedClient interface.
type MockAuthenticatedClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatedClientMockRecorder
}

// MockAuthenticatedClientMockRecorder is the mock recorder for MockAuthenticatedClient.
type MockAuthenticatedClientMockRecorder struct {
	mock *MockAuthenticatedClient
}

// NewMockAuthenticatedClient creates a new mock instance.
func NewMockAuthenticatedClient(ctrl *gomock.Controller) *MockAuthenticatedClient {
	mock := &MockAuthenticatedClient{ctrl: ctrl}
	mock.recorder = &MockAuthenticatedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticatedClient) EXPECT() *MockAuthenticatedClientMockRecorder {
	return m.recorder
}

// DeleteAccount mocks base method.
func (m *MockAuthenticatedClient) DeleteAccount(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAuthenticatedClientMockRecorder) DeleteAccount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAuthenticatedClient)(nil).DeleteAccount), ctx, id)
}

// GetAccountBalance mocks base method.
func (m *MockAuthenticatedClient) GetAccountBalance(ctx context.Context, id string) (*teller.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance", ctx, id)
	ret0, _ := ret[0].(*teller.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockAuthenticatedClientMockRecorder) GetAccountBalance(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockAuthenticatedClient)(nil).GetAccountBalance), ctx, id)
}

// GetAccounts mocks base method.
func (m *MockAuthenticatedClient) GetAccounts(ctx context.Context) ([]teller.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx)
	ret0, _ := ret[0].([]teller.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockAuthenticatedClientMockRecorder) GetAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockAuthenticatedClient)(nil).GetAccounts), ctx)
}

// GetTransactions mocks base method.
func (m *MockAuthenticatedClient) GetTransactions(ctx context.Context, accountId string, fromId *string, limit int64) ([]teller.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, accountId, fromId, limit)
	ret0, _ := ret[0].([]teller.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockAuthenticatedClientMockRecorder) GetTransactions(ctx, accountId, fromId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockAuthenticatedClient)(nil).GetTransactions), ctx, accountId, fromId, limit)
}
