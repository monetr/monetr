// Code generated by MockGen. DO NOT EDIT.
// Source: email.go
//
// Generated by this command:
//
//	mockgen -source=email.go -package=mockgen -destination=../internal/mockgen/email.go EmailCommunication
//

// Package mockgen is a generated GoMock package.
package mockgen

import (
	context "context"
	reflect "reflect"

	communication "github.com/monetr/monetr/server/communication"
	gomock "go.uber.org/mock/gomock"
)

// MockEmailCommunication is a mock of EmailCommunication interface.
type MockEmailCommunication struct {
	ctrl     *gomock.Controller
	recorder *MockEmailCommunicationMockRecorder
	isgomock struct{}
}

// MockEmailCommunicationMockRecorder is the mock recorder for MockEmailCommunication.
type MockEmailCommunicationMockRecorder struct {
	mock *MockEmailCommunication
}

// NewMockEmailCommunication creates a new mock instance.
func NewMockEmailCommunication(ctrl *gomock.Controller) *MockEmailCommunication {
	mock := &MockEmailCommunication{ctrl: ctrl}
	mock.recorder = &MockEmailCommunicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailCommunication) EXPECT() *MockEmailCommunicationMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailCommunication) SendEmail(ctx context.Context, email communication.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailCommunicationMockRecorder) SendEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailCommunication)(nil).SendEmail), ctx, email)
}
