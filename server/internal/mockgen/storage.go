// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -package=mockgen -destination=../internal/mockgen/storage.go Storage
//

// Package mockgen is a generated GoMock package.
package mockgen

import (
	context "context"
	io "io"
	reflect "reflect"

	storage "github.com/monetr/monetr/server/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockStorage) Read(ctx context.Context, uri string) (io.ReadCloser, storage.ContentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, uri)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(storage.ContentType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockStorageMockRecorder) Read(ctx, uri any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorage)(nil).Read), ctx, uri)
}

// Remove mocks base method.
func (m *MockStorage) Remove(ctx context.Context, uri string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, uri)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockStorageMockRecorder) Remove(ctx, uri any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockStorage)(nil).Remove), ctx, uri)
}

// Store mocks base method.
func (m *MockStorage) Store(ctx context.Context, buf io.ReadSeekCloser, info storage.FileInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, buf, info)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockStorageMockRecorder) Store(ctx, buf, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStorage)(nil).Store), ctx, buf, info)
}
