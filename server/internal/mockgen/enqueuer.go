// Code generated by MockGen. DO NOT EDIT.
// Source: enqueuer.go
//
// Generated by this command:
//
//	mockgen -source=enqueuer.go -package=mockgen -destination=../internal/mockgen/enqueuer.go JobEnqueuer
//

// Package mockgen is a generated GoMock package.
package mockgen

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJobEnqueuer is a mock of JobEnqueuer interface.
type MockJobEnqueuer struct {
	ctrl     *gomock.Controller
	recorder *MockJobEnqueuerMockRecorder
}

// MockJobEnqueuerMockRecorder is the mock recorder for MockJobEnqueuer.
type MockJobEnqueuerMockRecorder struct {
	mock *MockJobEnqueuer
}

// NewMockJobEnqueuer creates a new mock instance.
func NewMockJobEnqueuer(ctrl *gomock.Controller) *MockJobEnqueuer {
	mock := &MockJobEnqueuer{ctrl: ctrl}
	mock.recorder = &MockJobEnqueuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobEnqueuer) EXPECT() *MockJobEnqueuerMockRecorder {
	return m.recorder
}

// EnqueueJob mocks base method.
func (m *MockJobEnqueuer) EnqueueJob(ctx context.Context, queue string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueJob", ctx, queue, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueJob indicates an expected call of EnqueueJob.
func (mr *MockJobEnqueuerMockRecorder) EnqueueJob(ctx, queue, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueJob", reflect.TypeOf((*MockJobEnqueuer)(nil).EnqueueJob), ctx, queue, data)
}
