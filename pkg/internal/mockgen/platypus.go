// Code generated by MockGen. DO NOT EDIT.
// Source: platypus.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/monetr/monetr/pkg/models"
	platypus "github.com/monetr/monetr/pkg/platypus"
	plaid "github.com/plaid/plaid-go/plaid"
)

// MockPlatypus is a mock of Platypus interface.
type MockPlatypus struct {
	ctrl     *gomock.Controller
	recorder *MockPlatypusMockRecorder
}

// MockPlatypusMockRecorder is the mock recorder for MockPlatypus.
type MockPlatypusMockRecorder struct {
	mock *MockPlatypus
}

// NewMockPlatypus creates a new mock instance.
func NewMockPlatypus(ctrl *gomock.Controller) *MockPlatypus {
	mock := &MockPlatypus{ctrl: ctrl}
	mock.recorder = &MockPlatypusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatypus) EXPECT() *MockPlatypusMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPlatypus) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPlatypusMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPlatypus)(nil).Close))
}

// CreateLinkToken mocks base method.
func (m *MockPlatypus) CreateLinkToken(ctx context.Context, options platypus.LinkTokenOptions) (platypus.LinkToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLinkToken", ctx, options)
	ret0, _ := ret[0].(platypus.LinkToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLinkToken indicates an expected call of CreateLinkToken.
func (mr *MockPlatypusMockRecorder) CreateLinkToken(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkToken", reflect.TypeOf((*MockPlatypus)(nil).CreateLinkToken), ctx, options)
}

// ExchangePublicToken mocks base method.
func (m *MockPlatypus) ExchangePublicToken(ctx context.Context, publicToken string) (*platypus.ItemToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangePublicToken", ctx, publicToken)
	ret0, _ := ret[0].(*platypus.ItemToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangePublicToken indicates an expected call of ExchangePublicToken.
func (mr *MockPlatypusMockRecorder) ExchangePublicToken(ctx, publicToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangePublicToken", reflect.TypeOf((*MockPlatypus)(nil).ExchangePublicToken), ctx, publicToken)
}

// GetInstitution mocks base method.
func (m *MockPlatypus) GetInstitution(ctx context.Context, institutionId string) (*plaid.Institution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstitution", ctx, institutionId)
	ret0, _ := ret[0].(*plaid.Institution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstitution indicates an expected call of GetInstitution.
func (mr *MockPlatypusMockRecorder) GetInstitution(ctx, institutionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstitution", reflect.TypeOf((*MockPlatypus)(nil).GetInstitution), ctx, institutionId)
}

// GetWebhookVerificationKey mocks base method.
func (m *MockPlatypus) GetWebhookVerificationKey(ctx context.Context, keyId string) (*platypus.WebhookVerificationKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookVerificationKey", ctx, keyId)
	ret0, _ := ret[0].(*platypus.WebhookVerificationKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookVerificationKey indicates an expected call of GetWebhookVerificationKey.
func (mr *MockPlatypusMockRecorder) GetWebhookVerificationKey(ctx, keyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookVerificationKey", reflect.TypeOf((*MockPlatypus)(nil).GetWebhookVerificationKey), ctx, keyId)
}

// NewClient mocks base method.
func (m *MockPlatypus) NewClient(ctx context.Context, link *models.Link, accessToken, itemId string) (platypus.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", ctx, link, accessToken, itemId)
	ret0, _ := ret[0].(platypus.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockPlatypusMockRecorder) NewClient(ctx, link, accessToken, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockPlatypus)(nil).NewClient), ctx, link, accessToken, itemId)
}

// NewClientFromItemId mocks base method.
func (m *MockPlatypus) NewClientFromItemId(ctx context.Context, itemId string) (platypus.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClientFromItemId", ctx, itemId)
	ret0, _ := ret[0].(platypus.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClientFromItemId indicates an expected call of NewClientFromItemId.
func (mr *MockPlatypusMockRecorder) NewClientFromItemId(ctx, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientFromItemId", reflect.TypeOf((*MockPlatypus)(nil).NewClientFromItemId), ctx, itemId)
}

// NewClientFromLink mocks base method.
func (m *MockPlatypus) NewClientFromLink(ctx context.Context, accountId, linkId uint64) (platypus.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClientFromLink", ctx, accountId, linkId)
	ret0, _ := ret[0].(platypus.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClientFromLink indicates an expected call of NewClientFromLink.
func (mr *MockPlatypusMockRecorder) NewClientFromLink(ctx, accountId, linkId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientFromLink", reflect.TypeOf((*MockPlatypus)(nil).NewClientFromLink), ctx, accountId, linkId)
}
