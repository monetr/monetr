# vim: set ft=yaml
services:
  mail:
    # Mailpit is used for testing email sending from the application. This is
    # for things like forgot password or email verification. It can be accessed
    # by navigating to `http://localhost/mail`
    image: axllent/mailpit
    environment:
      # MP_WEBROOT: "mail"
      MP_SMTP_AUTH: "monetr:mailpassword"
      MP_SMTP_AUTH_ALLOW_INSECURE: "true"
    healthcheck:
      test: [ "CMD", "wget", "http://localhost:8025", "-q", "-O", "-" ]
      interval: 10s
      timeout: 10s
      retries: 12
      start_period: 30s
  valkey:
    image: valkey/valkey:9
    healthcheck:
      test: [ "CMD", "valkey-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  postgres:
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    image: postgres:16
    environment:
      # Make it so that monetr doesn't need any credentials to connect to PostgreSQL.
      POSTGRES_PASSWORD: ""
      POSTGRES_HOST_AUTH_METHOD: trust
  nginx:
    tty: true
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "@NGINX_PORT@:@NGINX_PORT@"
    volumes:
      - "@NGINX_CONFIG_FILE@:/etc/nginx/nginx.conf"
      - "@LOCAL_CERTIFICATE_DIR@:/etc/nginx/tls"
    depends_on:
      - monetr
      - ui
      - mail
  ui_builder:
    image: monetr-ui:local
    pull_policy: never
    restart: no
    build:
      context: .
      dockerfile_inline: |
        FROM node:20.19.5-trixie
        RUN npm install -g pnpm
  ui:
    # The UI will be run inside a container as well. However if you are having trouble getting it to work make sure you
    # do `pnpm install` before doing docker compose up.
    tty: true # Color output.
    image: monetr-ui:local
    pull_policy: never
    user: "${UID:-1000}:${GID:-1000}"
    working_dir: "@CMAKE_SOURCE_DIR@/interface"
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 10s
      timeout: 10s
      retries: 12
      start_period: 60s
    environment:
      UID: "${UID:-1000}"
      GID: "${GID:-1000}"
      WS_PROTO: 'wss' # TODO Make this based on the local protocol
      INSECURE_WS: "false" # Makes it so that we are not trying to use TLS for the hot-reload websocket.
      NODE_OPTIONS: --openssl-legacy-provider # Fixes a weird issue when trying to include SVGs.
      IS_COMPOSE: "true" # Makes it so that the WebPack progress bar is disabled.
      MONETR_UI_DOMAIN_NAME: "@MONETR_LOCAL_DOMAIN@"
      CLOUD_MAGIC: "@CLOUD_MAGIC@"
      MONETR_SENTRY_DSN: "${MONETR_SENTRY_DSN:-@MONETR_SENTRY_DSN@}"
    volumes:
      - "@CMAKE_SOURCE_DIR@:@CMAKE_SOURCE_DIR@"
    command:
      - "pnpm"
      - "start"
    depends_on:
      ui_builder:
        condition: service_completed_successfully
  monetr_builder:
    image: monetr-backend:local
    pull_policy: never
    restart: no
    user: "${UID:-1000}:${GID:-1000}"
    build:
      context: .
      dockerfile: "@CMAKE_SOURCE_DIR@/compose/monetr-backend.Dockerfile"
  monetr:
    tty: true # Makes color output work nicely.
    image: monetr-backend:local
    pull_policy: never
    user: "${UID:-1000}:${GID:-1000}"
    restart: always # If something goes wrong just restart the container, this is for development only.
    working_dir: /build
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4000/api/health" ]
      interval: 3s
      timeout: 5s
      retries: 35
      start_period: 60s
    environment:
      UID: "${UID:-1000}"
      GID: "${GID:-1000}"
      air_wd: /build
      DISABLE_GO_RELOAD: "@DISABLE_GO_RELOAD@"
      CLOUD_MAGIC: "@CLOUD_MAGIC@"
      MONETR_SERVER_EXTERNAL_URL: "@LOCAL_PROTOCOL@://my.@MONETR_LOCAL_DOMAIN@"
      # By default we want to use the AWS KMS provider as that is what we have built into the local env. But iuf the
      # developer specifies a different KMS provider we want to use that instead.
      MONETR_KMS_PROVIDER: "@MONETR_KMS_PROVIDER@"
      # # If they are developing using Google's KMS then they'll need to provide a resource name.
      # MONETR_KMS_RESOURCE_NAME: "${MONETR_KMS_RESOURCE_NAME:-}"
      # If you want to do development against Plaid you will need to provide your own secrets. Please do not modify this
      # file, instead define these as environment variables in your own shell when you execute the compose.
      MONETR_PLAID_CLIENT_ID: $PLAID_CLIENT_ID
      MONETR_PLAID_CLIENT_SECRET: $PLAID_CLIENT_SECRET
      MONETR_STRIPE_API_KEY: $MONETR_STRIPE_API_KEY
      MONETR_STRIPE_WEBHOOK_SECRET: $MONETR_STRIPE_WEBHOOK_SECRET
      MONETR_STRIPE_DEFAULT_PRICE_ID: $MONETR_STRIPE_DEFAULT_PRICE_ID
      MONETR_STRIPE_TAXES_ENABLED: "@MONETR_STRIPE_TAXES_ENABLED@"
      MONETR_CAPTCHA_PUBLIC_KEY: $MONETR_CAPTCHA_PUBLIC_KEY
      MONETR_CAPTCHA_PRIVATE_KEY: $MONETR_CAPTCHA_PRIVATE_KEY
      MONETR_SENTRY_DSN: "${MONETR_SENTRY_DSN:-@MONETR_SENTRY_DSN@}"
      MONETR_SENTRY_EXTERNAL_DSN: "${MONETR_SENTRY_DSN:-@MONETR_SENTRY_DSN@}"
      MONETR_EMAIL_VERIFICATION_ENABLED: "@MONETR_EMAIL_VERIFICATION_ENABLED@"
      # If vault is the KMS provider then these settings will be used
      MONETR_VAULT_TOKEN: "@VAULT_ROOT_TOKEN@"
      MONETR_STORAGE_ENABLED: "@MONETR_STORAGE_ENABLED@"
      MONETR_STORAGE_PROVIDER: "@MONETR_STORAGE_PROVIDER@"
    command:
      - bash
      - -c
      - /build/compose/api-entrypoint.sh
    links:
      - valkey
      - postgres
      - mail
    ports:
      # This port is used for editors to connect to dlv remotely to do step debugging.
      - 2345:2345
    volumes:
      - goData:/go/pkg/mod
      - "@CMAKE_SOURCE_DIR@:/build"
    depends_on:
      mail:
        condition: service_started
      valkey:
        condition: service_started
      postgres:
        condition: service_started
      monetr_builder:
        condition: service_completed_successfully

volumes:
  kmsData:
  tmpData:
  goData:
