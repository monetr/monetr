# vim: set ft=yaml
services:
  kms:
    image: nsmithuk/local-kms
    restart: always # If something goes wrong just restart the container, this is for development only.
    volumes:
      - "@CMAKE_SOURCE_DIR@/compose/kms.yaml:/init/seed.yaml"
  s3:
    image: quay.io/minio/minio:RELEASE.2023-12-09T18-17-51Z
    restart: always # If something goes wrong just restart the container, this is for development only.
    volumes:
      - s3Data:/data
    ports:
      - 9001:9001
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 3s
      timeout: 15s
      retries: 10
      start_period: 5s
    environment:
      MINIO_ROOT_USER: monetr
      MINIO_ROOT_PASSWORD: password
    entrypoint: >
      /bin/sh -c "
      mkdir -p /data/monetr-storage;
      minio server /data --console-address ':9001';
      "
  mail:
    # Mailhog is used for testing email sending from the application. This is for things like forgot password or email
    # verification. It can be accessed by navigating to `http://localhost/mail`
    build:
      dockerfile: "@CMAKE_SOURCE_DIR@/compose/Dockerfile.mailhog"
      context: .
    healthcheck:
      test: [ "CMD", "wget", "http://localhost:8025", "-q", "-O", "-" ]
      interval: 10s
      timeout: 10s
      retries: 12
      start_period: 60s
    environment:
      MH_CORES_ORIGIN: "@MONETR_LOCAL_DOMAIN@"
      MH_HOSTNAME: "@MONETR_LOCAL_DOMAIN@"
  redis:
    image: redis:6.2.7-alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  postgres:
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    image: postgres:16
    environment:
      # Make it so that monetr doesn't need any credentials to connect to PostgreSQL.
      POSTGRES_PASSWORD: ""
      POSTGRES_HOST_AUTH_METHOD: trust
  nginx:
    tty: true
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "@NGINX_PORT@:@NGINX_PORT@"
    volumes:
      - "@NGINX_CONFIG_FILE@:/etc/nginx/nginx.conf"
      - "@LOCAL_CERTIFICATE_DIR@:/etc/nginx/tls"
    depends_on:
      - monetr
      - ui
      - mail
  ui:
    # The UI will be run inside a container as well. However if you are having trouble getting it to work make sure you
    # do `pnpm install` before doing docker compose up.
    tty: true # Color output.
    image: node:18.12.0-buster
    user: "${UID:-0}:${GID:-0}"
    working_dir: /build
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:30000" ]
      interval: 10s
      timeout: 10s
      retries: 12
      start_period: 60s
    environment:
      WS_PROTO: 'wss' # TODO Make this based on the local protocol
      INSECURE_WS: "false" # Makes it so that we are not trying to use TLS for the hot-reload websocket.
      NODE_OPTIONS: --openssl-legacy-provider # Fixes a weird issue when trying to include SVGs.
      IS_COMPOSE: "true" # Makes it so that the WebPack progress bar is disabled.
      MONETR_UI_DOMAIN_NAME: "@MONETR_LOCAL_DOMAIN@"
      CLOUD_MAGIC: "@CLOUD_MAGIC@"
    volumes:
      - ./:/build
    command:
      - bash
      - -c
      - /build/compose/ui-entrypoint.sh
  monetr:
    tty: true # Makes color output work nicely.
    image: golang:1.21.9
    user: "${UID:-0}:${GID:-0}"
    restart: always # If something goes wrong just restart the container, this is for development only.
    working_dir: /build
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4000/api/health" ]
      interval: 3s
      timeout: 5s
      retries: 35
      start_period: 60s
    environment:
      air_wd: /build
      DISABLE_GO_RELOAD: "@DISABLE_GO_RELOAD@"
      CLOUD_MAGIC: "@CLOUD_MAGIC@"
      MONETR_SERVER_EXTERNAL_URL: "@LOCAL_PROTOCOL@://@MONETR_LOCAL_DOMAIN@"
      # By default we want to use the AWS KMS provider as that is what we have built into the local env. But iuf the
      # developer specifies a different KMS provider we want to use that instead.
      MONETR_KMS_PROVIDER: "aws"
      # # If they are developing using Google's KMS then they'll need to provide a resource name.
      # MONETR_KMS_RESOURCE_NAME: "${MONETR_KMS_RESOURCE_NAME:-}"
      # If you want to do development against Plaid you will need to provide your own secrets. Please do not modify this
      # file, instead define these as environment variables in your own shell when you execute the compose.
      MONETR_PLAID_CLIENT_ID: $PLAID_CLIENT_ID
      MONETR_PLAID_CLIENT_SECRET: $PLAID_CLIENT_SECRET
      MONETR_STRIPE_API_KEY: $MONETR_STRIPE_API_KEY
      MONETR_STRIPE_WEBHOOK_SECRET: $MONETR_STRIPE_WEBHOOK_SECRET
      MONETR_STRIPE_DEFAULT_PRICE_ID: $MONETR_STRIPE_DEFAULT_PRICE_ID
      MONETR_STRIPE_TAXES_ENABLED: "@MONETR_STRIPE_TAXES_ENABLED@"
      MONETR_CAPTCHA_PUBLIC_KEY: $MONETR_CAPTCHA_PUBLIC_KEY
      MONETR_CAPTCHA_PRIVATE_KEY: $MONETR_CAPTCHA_PRIVATE_KEY
      MONETR_SENTRY_DSN: "$MONETR_SENTRY_DSN"
      MONETR_SENTRY_EXTERNAL_DSN: "@MONETR_SENTRY_DSN@"
      MONETR_EMAIL_VERIFICATION_ENABLED: "@MONETR_EMAIL_VERIFICATION_ENABLED@"
      AWS_ACCESS_KEY: monetr
      AWS_SECRET_KEY: password
    command:
      - bash
      - -c
      - /build/compose/api-entrypoint.sh
    links:
      - redis
      - postgres
      - s3
      - kms
      - mail
    ports:
      # This port is used for editors to connect to dlv remotely to do step debugging.
      - 2345:2345
    volumes:
      - goData:/go/pkg/mod
      - "@CMAKE_SOURCE_DIR@:/build"
    depends_on:
      mail:
        condition: service_started
      redis:
        condition: service_started
      postgres:
        condition: service_started
      kms:
        condition: service_started

volumes:
  kmsData:
  tmpData:
  goData:
  s3Data:
