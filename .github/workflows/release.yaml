name: Bot

on:
  push:
    branches:
      - main

jobs:
  release_please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      version: "${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}"
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v3
        id: release
        with:
          changelog-types: |
            [
              {"type":"feat","section":"Features","hidden":false},
              {"type":"feature","section":"Features","hidden":false},
              {"type":"deps","section":"Dependencies","hidden":false},
              {"type":"fix","section":"Bug Fixes","hidden":false},
              {"type":"chore","section":"Miscellaneous","hidden":false},
              {"type":"doc","section":"Documentation","hidden":false},
              {"type":"docs","section":"Documentation","hidden":false},
              {"type":"ci","section":"Build Automation","hidden":false}
            ]
          release-type: simple
          package-name: monetr
          version-file: version.txt
          bump-patch-for-minor-pre-major: true

  build_ui:
    name: Build UI
    if: ${{ needs.release_please.outputs.release_created }}
    needs:
      - release_please
    runs-on: ubuntu-latest
    steps:
      - id: go-cache-paths
        name: Install pnpm and configure cache
        run: |
          npm install -g pnpm
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fix dumb git issue
        run: |
          git config --global --add safe.directory ${PWD}

      - name: pnpm Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
            ${{ runner.os }}-pnpm-store

      - name: Build Interface
        run: |
          make interface RELEASE=${{ needs.release_please.outputs.version }}

      - uses: actions/upload-artifact@v4
        name: Upload UI As Artifact
        with:
          name: '${{ needs.release_please.outputs.version }}-maps'
          path: '${{ github.workspace }}/server/ui/static'
          retention-days: 7

  docker:
    if: ${{ needs.release_please.outputs.release_created }}
    needs:
      - release_please
    name: Container (Docker)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        run: |
          git config --global --add safe.directory ${PWD}
          make container-push RELEASE_VERSION=${{ needs.release_please.outputs.version }}

  deploy:
    if: ${{ needs.release_please.outputs.release_created }}
    needs:
      - "release_please"
      - "docker"
      - "build_ui"
    name: Deploy my.monetr.app
    runs-on: ubuntu-latest
    steps:
      - uses: chrnorm/deployment-action@v2
        name: Create my.monetr.app Deployment
        id: deployment
        with:
          initial-status: queued
          token: "${{ github.token }}"
          environment-url: https://my.monetr.app
          environment: my.monetr.app
          transient-environment: false
          production-environment: false
          ref: "v${{ needs.release_please.outputs.version }}"
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        name: Download UI As Artifact
        with:
          name: '${{ needs.release_please.outputs.version }}-maps'
          path: '${{ github.workspace }}/server/ui/static'
      - name: Create Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: monetr
        with:
          environment: 'my.monetr.app'
          version: 'v${{ needs.release_please.outputs.version }}'
          sourcemaps: 'server/ui/static/assets/scripts'
          url_prefix: 'https://my.monetr.app'
      - name: Trigger Deployment
        run: |
          curl -X POST \
            --fail \
            -F token=${{ secrets.GITLAB_CI_TOKEN }} \
            -F "ref=main" \
            -F "variables[ENVIRONMENT]=my.monetr.app" \
            -F "variables[GH_DEPLOYMENT_ID]=${{ steps.deployment.outputs.deployment_id }}" \
            -F "variables[DEPLOY_VERSION]=v${{ needs.release_please.outputs.version }}" \
            https://gitlab.com/api/v4/projects/61422476/trigger/pipeline
