name: GH

on:
  push:
    branches:
      - main

jobs:
  go_dependencies:
    name: Go Dependencies
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/build-containers/golang:1.19.4
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-
      - name: Dependencies
        run: make go-dependencies

  ui_dependencies:
    name: UI Dependencies
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/build-containers/node:18.10.0-buster
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-ui-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-ui-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
      - name: Dependencies
        run: make ui-dependencies

  local_dev:
    name: Local Development
    needs:
      - go_dependencies
      - ui_dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ${{ github.workspace }}/vendor
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-
      - uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-ui-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-ui-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Setup local development environment
        timeout-minutes: 15
        run: |
          npm install -g pnpm
          make develop || (make logs && exit 1)
          curl -k https://monetr.local
          make shutdown

  build_ui:
    needs:
      - ui_dependencies
    name: Build UI
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/build-containers/node:18.10.0-buster
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-ui-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-ui-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
      - name: Build
        run: make build-ui
      - uses: actions/upload-artifact@v3
        with:
          name: '${{ github.sha }}-ui'
          path: '${{ github.workspace }}/pkg/ui/static/'
          retention-days: 7
      - uses: actions/upload-artifact@v3
        with:
          name: '${{ github.sha }}-source-maps'
          path: '${{ github.workspace }}/build/source_maps'
          retention-days: 1

  build_notice:
    needs:
      - go_dependencies
      - ui_dependencies
    name: Build Third Party Notice
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ${{ github.workspace }}/vendor
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-
      - uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-ui-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-ui-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Third Party Notice
        run: |
          npm install -g pnpm
          make notice
      - uses: actions/upload-artifact@v3
        with:
          name: '${{ github.sha }}-notice'
          path: '${{ github.workspace }}/pkg/build/NOTICE.md'
          retention-days: 7

  build_binary:
    needs:
      - build_notice
      - build_ui
      - go_dependencies
    name: Build Binary
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/build-containers/golang:1.19.4
    strategy:
      matrix:
        os:
          - linux
          - darwin
          - windows
        architecture:
          - amd64
          - arm64
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-
      - uses: actions/download-artifact@v3
        name: Download Compiled UI Artifacts
        with:
          name: '${{ github.sha }}-ui'
          path: '${{ github.workspace }}/pkg/ui/static/'
      - uses: actions/download-artifact@v3
        name: Download Third Party Notice Artifacts
        with:
          name: '${{ github.sha }}-notice'
          path: '${{ github.workspace }}/pkg/build/'
      - name: Build
        run: GOOS=${{ matrix.os }} GOARCH=${{ matrix.architecture }} make build
      - uses: actions/upload-artifact@v3
        with:
          name: '${{ github.sha }}-binary-${{ matrix.os }}-${{ matrix.architecture }}'
          path: |
            ${{ github.workspace }}/build/monetr
            ${{ github.workspace }}/build/monetr.exe
          if-no-files-found: ignore
          retention-days: 7

  go_test:
    needs:
      - go_dependencies
    name: Test Go
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/build-containers/golang:1.19.4
    env:
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: ""
      POSTGRES_USER: api-testing
      POSTGRES_DB: test-db
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_USER: api-testing
          POSTGRES_DB: test-db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-
      - name: Test
        run: make test-go
      - name: Annotate tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.7.0
        with:
          test-results: '${{ github.workspace }}/rest-api-tests.json'
      - uses: actions/upload-artifact@v3
        name: Upload Go Test Coverage Artifacts
        if: always()
        with:
          name: '${{ github.sha }}-go-coverage'
          path: '${{ github.workspace }}/coverage.txt'
          retention-days: 1

  ui_test:
    needs:
      - ui_dependencies
    name: Test UI
    runs-on: ubuntu-latest
    container: ghcr.io/monetr/build-containers/node:18.10.0-buster
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-ui-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-ui-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}
      - name: Test
        run: make test-ui
      - uses: actions/upload-artifact@v3
        name: Upload UI Test Coverage Artifacts
        if: always()
        with:
          name: '${{ github.sha }}-ui-coverage'
          path: '${{ github.workspace }}/coverage/clover.xml'
          retention-days: 1

  codecov:
    name: CodeCov
    needs:
      - go_test
      - ui_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        name: Download Go Coverage Artifacts
        with:
          name: '${{ github.sha }}-go-coverage'
          path: '${{ github.workspace }}/coverage'
      - uses: actions/download-artifact@v3
        name: Download UI Coverage Artifacts
        with:
          name: '${{ github.sha }}-ui-coverage'
          path: '${{ github.workspace }}/coverage'
      - name: CodeCov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: '${{ github.workspace }}/coverage/clover.xml,${{ github.workspace }}/coverage/coverage.txt'
          name: monetr

  mkdocs:
    name: MkDocs
    runs-on: ubuntu-latest
    env:
      MKDOCS_IMAGE: ghcr.io/monetr/mkdocs-material-insiders:09092023
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }} # Read only token.
      - name: Build
        run: make mkdocs
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        with:
          branch: monetr.app
          folder: build/site

  docker:
    needs:
      - build_notice
      - build_ui
    name: Container (Docker)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Save Tag Variable
        id: tag
        run: |
          echo POST_TAG=$(git describe --tag | cut -d "v" -f 2) >> $GITHUB_OUTPUT
      - uses: actions/download-artifact@v3
        name: Download Compiled UI Artifacts
        with:
          name: '${{ github.sha }}-ui'
          path: '${{ github.workspace }}/pkg/ui/static/'
      - uses: actions/download-artifact@v3
        name: Download Third Party Notice Artifacts
        with:
          name: '${{ github.sha }}-notice'
          path: '${{ github.workspace }}/pkg/build/'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to containers.monetr.dev
        uses: docker/login-action@v1
        with:
          registry: containers.monetr.dev
          username: ${{ secrets.CONTAINERS_MONETR_DEV_USERNAME }}
          password: ${{ secrets.CONTAINERS_MONETR_DEV_PASSWORD }}
      - name: Build
        run: |
          make container ENGINE=docker CONTAINER_REPOS=containers.monetr.dev/monetr/monetr RELEASE_VERSION=${{ steps.tag.outputs.POST_TAG }}
          make container-push ENGINE=docker CONTAINER_REPOS=containers.monetr.dev/monetr/monetr RELEASE_VERSION=${{ steps.tag.outputs.POST_TAG }}

  deploy:
    needs:
      - "go_test"
      - "docker"
    name: Deploy my.monetr.dev
    runs-on: ubuntu-latest
    steps:
      - uses: chrnorm/deployment-action@releases/v1
        name: Create my.monetr.dev Deployment
        id: deployment
        with:
          initial_status: pending
          token: "${{ github.token }}"
          target_url: https://my.monetr.dev
          environment: my.monetr.dev
          ref: ${{ github.sha }}
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v3
        name: Download Compiled UI Artifacts
        with:
          name: '${{ github.sha }}-source-maps'
          path: '${{ github.workspace }}/build/source_maps'
      - name: Save Tag Variable
        id: tag
        run: |
          echo POST_TAG=$(git describe --tag | cut -d "v" -f 2) >> $GITHUB_OUTPUT
      - name: Create Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: monetr
        with:
          environment: 'my.monetr.dev'
          version: 'v${{ steps.tag.outputs.POST_TAG }}'
          sourcemaps: './build/source_maps'
          url_prefix: 'https://my.monetr.dev'
      - name: Trigger Deployment
        run: |
          curl -X POST \
            --fail \
            -F token=${{ secrets.GITLAB_CI_TOKEN }} \
            -F "ref=${{ github.head_ref || github.ref_name }}" \
            -F "variables[ENVIRONMENT]=my.monetr.dev" \
            -F "variables[RELEASE_VERSION]=${{ steps.tag.outputs.POST_TAG }}" \
            https://gitlab.com/api/v4/projects/46647440/trigger/pipeline
