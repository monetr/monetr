{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"api/API/","text":"Swagger Documentation !! SWAGGER ERROR: File swagger.json not found. !!","title":"REST API"},{"location":"api/API/#swagger-documentation","text":"!! SWAGGER ERROR: File swagger.json not found. !!","title":"Swagger Documentation"},{"location":"api/resources/","text":"REST API Resources Available resources for the monetr REST API. Resource Available endpoints Authentication /api/authenication/login , /api/authentication/logout , /api/authentication/register Bank Accounts /api/bank_accounts Funding Schedules /api/bank_accounts/:bankAccountId/funding_schedules Links /api/links Spending /api/bank_accounts/:bankAccountId/spending Transactions /api/bank_accounts/:bankAccountId/transactions User /api/users/me","title":"REST API Resources"},{"location":"api/resources/#rest-api-resources","text":"Available resources for the monetr REST API. Resource Available endpoints Authentication /api/authenication/login , /api/authentication/logout , /api/authentication/register Bank Accounts /api/bank_accounts Funding Schedules /api/bank_accounts/:bankAccountId/funding_schedules Links /api/links Spending /api/bank_accounts/:bankAccountId/spending Transactions /api/bank_accounts/:bankAccountId/transactions User /api/users/me","title":"REST API Resources"},{"location":"api/resources/authentication/","text":"Authentication Authentication resources for monetr's REST API. Authentication is primarily broken up into three objects. Logins, users, and accounts. Each of these objects are different from each other, but all of them are related. Logins are used to represent a single person's credentials for accessing monetr, as well as some of their basic information like their name. Users are a child object of logins, and a single login can have multiple users. Users are tied to a single account. Accounts are how all data is separated inside the application. When you create a Plaid Link or expenses, or other budgeting items. They are created at an account level. Your login tells us what users represent you, and those users tell us what accounts you have access to. classDiagram Login --> \"many\" User : Can have User \"1\" --> \"1\" Account : Associated with class Login{ +int loginId +String email +String firstName +String lastName } class User{ +int userId +int loginId +int accountId } class Account{ +int accountId } Note At the moment logins are limited to a single user. This is a software constraint for now. The design to allow logins access to multiple users was to allow (in the future) people to have shared access to an account. Such as with a spouse. Login Provide login credentials to authenticate a user. This API will not respond with a token in the body. It stores the token in an HTTP only cookie to prevent it from being accessible from Javascript code in the browser. If the credentials are valid then you will receive a 200 OK status code in the response. HTTP POST /api/authentication/login Request Body Attribute Type Required Description email string yes The email address associated with the desired login. password string yes The login password. Passwords must be at least 8 characters. captcha string no * By default this field is not required, but if captcha is enabled then this field will be required. It should be the resulting value of a ReCAPTCHA challenge. totp string no Not yet fully implemented, but will be used to provide TOTP codes for the user during the authentication flow. Response Body Attribute Type Required Description isActive bool yes Used as an indicator for whether or not the current user's subscription is active. If billing is disabled this is always true. nextUrl string no If the API needs to direct a user to a certain path after authenticating, this field will be present. This is intended to be used for on-boarding or for billing flows. Note When the request is successful the response body is pretty minimal. User details should be retrieved using a follow up request to Get Me Login Examples Example Login Request curl --request POST \\ --url \"https://my.monetr.app/api/authentication/login\" \\ --header \"content-type: application/json\" \\ --data '{ \"email\": \"email@example.com\", \"password\": \"superSecureP@ssw0rd\" }' Successful If the credentials provided are valid and there is nothing else to be done, then the response will simply be this. 200 Ok { \"isActive\" : true } Subscription is not active If the subscription for the authenticated user is not active (or if there is no subscription at all), then the response body will contain a path indicating to the UI what the next URL should be. 200 Ok { \"isActive\" : false , \"nextUrl\" : \"/account/subscribe\" } Login Errors Invalid Credentials If the credentials provided are not valid you will receive the following response body: 401 Unauthorized { \"error\" : \"invalid email and password\" } Email is not verified If email verification is required by the server, then it is possible to get a login failure response even with valid credentials. If the credentials provided are valid, but the login's email is not verified yet; then you will receive the following response. 428 Precondition Required { \"error\" : \"email address is not verified\" , \"code\" : \"EMAIL_NOT_VERIFIED\" } MFA is required That is not the only error that can result in a 428 status code, if the user requires MFA you will receive the same status code upon providing valid credentials. But the code in the error body will be different and represent what action needs to be taken by the user. 428 Precondition Required { \"error\" : \"login requires MFA\" , \"code\" : \"MFA_REQUIRED\" } Logout Because cookies are HTTP only, there is no way to remove the cookies from our UI code. Instead, we have a logout endpoint that removes the cookies. HTTP GET /api/authentication/logout Logout Examples Example Login Request curl --request GET \\ --url \"https://my.monetr.app/api/authentication/logout\" Logout does not return an error if the cookie is not present, it will always return a 200 status code with an empty response body. Register New users can register for monetr using this endpoint. It can be configured to require ReCAPTCHA to reduce the likelihood that the endpoint will be spammed. Even in self-hosted deployments, it will require a valid email address is used. 1 Registering will create a new login, user, and account using the provided details. If billing is enabled on the server, your email address will be used to create a Stripe customer. Stripe is used to manage subscriptions and this way Stripe has a way to contact you or vice versa if needed. HTTP POST /api/authentication/register Request Body Attribute Type Required Description email string yes The email address associated with the desired login. password string yes The login password. Passwords must be at least 8 characters. Leading and trailing spaces are trimmed from the password. firstName string yes By default this field is not required, but if captcha is enabled then this field will be required. It should be the resulting value of a ReCAPTCHA challenge. lastName string yes Not yet fully implemented, but will be used to provide TOTP codes for the user during the authentication flow. timezone string yes The timezone you want your account to be configured for. captcha string no * Can be required if ReCAPTCHA is enabled on the server. betaCode string no * Can be required if the server requires an access code to create an account. agree bool yes Used to denote that the user has agreed to the terms of use for monetr. Response Body Attribute Type Required Description message string no If the user needs to verify their email then this will contain a message that can be presented to the user. requireVerification bool yes If the server requires that the login's email is verified, the fields below this will be omitted in the response body and this will be true. If this is false then the user does not need to verify their email. nextUrl string no If the API requires that the user take some on-boarding action, such as setting up a subscription. There will be a path provided here for the user to be redirected to. user User no If email verification is not required by the server then the newly created user object will be present in the response. isActive bool no Indicated whether or not the user is active, for servers that require billing this will be false initially. Register Examples Example Register Request curl --request POST \\ --url \"https://my.monetr.app/api/authentication/register\" \\ --header \"content-type: application/json\" \\ --data '{ \"email\": \"email@example.com\", \"password\": \"superSecureP@ssw0rd\", \"firstName\": \"Elliot\", \"lastName\": \"Courant\", \"timezone\": \"America/Chicago\", \"agree\": true }' Successful If the registration was successful and email verification is not necessary then you'll see a response body similar to the following. 200 Ok { \"nextUrl\" : \"/setup\" , \"user\" : { \"loginId\" : 1234 , \"accountId\" : 1235 , \"userId\" : 1236 , \"login\" : { \"loginId\" : 1234 , \"firstName\" : \"Elliot\" , \"lastName\" : \"Courant\" , }, \"account\" : { \"accountId\" : 1235 , \"timezone\" : \"America/Chicago\" } }, \"isActive\" : true , \"requireVerification\" : false } Email verification required If the registration succeeds, but we need to verify the login's email address. 200 Ok { \"message\" : \"A verification email has been sent to your email address, please verify your email.\" , \"requireVerification\" : true } Email addresses are not used to send people content unprompted. Email addresses provide a reliable way to assure uniqueness in users, as well as a way to contact them for things like billing and resetting forgotten passwords. For self-hosted deployments, it is not required that the email address used be one that can actually receive emails. However, this will limit your ability to easily reset forgotten passwords at this time. \u21a9","title":"Authentication"},{"location":"api/resources/authentication/#authentication","text":"Authentication resources for monetr's REST API. Authentication is primarily broken up into three objects. Logins, users, and accounts. Each of these objects are different from each other, but all of them are related. Logins are used to represent a single person's credentials for accessing monetr, as well as some of their basic information like their name. Users are a child object of logins, and a single login can have multiple users. Users are tied to a single account. Accounts are how all data is separated inside the application. When you create a Plaid Link or expenses, or other budgeting items. They are created at an account level. Your login tells us what users represent you, and those users tell us what accounts you have access to. classDiagram Login --> \"many\" User : Can have User \"1\" --> \"1\" Account : Associated with class Login{ +int loginId +String email +String firstName +String lastName } class User{ +int userId +int loginId +int accountId } class Account{ +int accountId } Note At the moment logins are limited to a single user. This is a software constraint for now. The design to allow logins access to multiple users was to allow (in the future) people to have shared access to an account. Such as with a spouse.","title":"Authentication"},{"location":"api/resources/authentication/#login","text":"Provide login credentials to authenticate a user. This API will not respond with a token in the body. It stores the token in an HTTP only cookie to prevent it from being accessible from Javascript code in the browser. If the credentials are valid then you will receive a 200 OK status code in the response. HTTP POST /api/authentication/login","title":"Login"},{"location":"api/resources/authentication/#request-body","text":"Attribute Type Required Description email string yes The email address associated with the desired login. password string yes The login password. Passwords must be at least 8 characters. captcha string no * By default this field is not required, but if captcha is enabled then this field will be required. It should be the resulting value of a ReCAPTCHA challenge. totp string no Not yet fully implemented, but will be used to provide TOTP codes for the user during the authentication flow.","title":"Request Body"},{"location":"api/resources/authentication/#response-body","text":"Attribute Type Required Description isActive bool yes Used as an indicator for whether or not the current user's subscription is active. If billing is disabled this is always true. nextUrl string no If the API needs to direct a user to a certain path after authenticating, this field will be present. This is intended to be used for on-boarding or for billing flows. Note When the request is successful the response body is pretty minimal. User details should be retrieved using a follow up request to Get Me","title":"Response Body"},{"location":"api/resources/authentication/#login-examples","text":"Example Login Request curl --request POST \\ --url \"https://my.monetr.app/api/authentication/login\" \\ --header \"content-type: application/json\" \\ --data '{ \"email\": \"email@example.com\", \"password\": \"superSecureP@ssw0rd\" }'","title":"Login Examples"},{"location":"api/resources/authentication/#successful","text":"If the credentials provided are valid and there is nothing else to be done, then the response will simply be this. 200 Ok { \"isActive\" : true }","title":"Successful"},{"location":"api/resources/authentication/#subscription-is-not-active","text":"If the subscription for the authenticated user is not active (or if there is no subscription at all), then the response body will contain a path indicating to the UI what the next URL should be. 200 Ok { \"isActive\" : false , \"nextUrl\" : \"/account/subscribe\" }","title":"Subscription is not active"},{"location":"api/resources/authentication/#login-errors","text":"","title":"Login Errors"},{"location":"api/resources/authentication/#invalid-credentials","text":"If the credentials provided are not valid you will receive the following response body: 401 Unauthorized { \"error\" : \"invalid email and password\" }","title":"Invalid Credentials"},{"location":"api/resources/authentication/#email-is-not-verified","text":"If email verification is required by the server, then it is possible to get a login failure response even with valid credentials. If the credentials provided are valid, but the login's email is not verified yet; then you will receive the following response. 428 Precondition Required { \"error\" : \"email address is not verified\" , \"code\" : \"EMAIL_NOT_VERIFIED\" }","title":"Email is not verified"},{"location":"api/resources/authentication/#mfa-is-required","text":"That is not the only error that can result in a 428 status code, if the user requires MFA you will receive the same status code upon providing valid credentials. But the code in the error body will be different and represent what action needs to be taken by the user. 428 Precondition Required { \"error\" : \"login requires MFA\" , \"code\" : \"MFA_REQUIRED\" }","title":"MFA is required"},{"location":"api/resources/authentication/#logout","text":"Because cookies are HTTP only, there is no way to remove the cookies from our UI code. Instead, we have a logout endpoint that removes the cookies. HTTP GET /api/authentication/logout","title":"Logout"},{"location":"api/resources/authentication/#logout-examples","text":"Example Login Request curl --request GET \\ --url \"https://my.monetr.app/api/authentication/logout\" Logout does not return an error if the cookie is not present, it will always return a 200 status code with an empty response body.","title":"Logout Examples"},{"location":"api/resources/authentication/#register","text":"New users can register for monetr using this endpoint. It can be configured to require ReCAPTCHA to reduce the likelihood that the endpoint will be spammed. Even in self-hosted deployments, it will require a valid email address is used. 1 Registering will create a new login, user, and account using the provided details. If billing is enabled on the server, your email address will be used to create a Stripe customer. Stripe is used to manage subscriptions and this way Stripe has a way to contact you or vice versa if needed. HTTP POST /api/authentication/register","title":"Register"},{"location":"api/resources/authentication/#request-body_1","text":"Attribute Type Required Description email string yes The email address associated with the desired login. password string yes The login password. Passwords must be at least 8 characters. Leading and trailing spaces are trimmed from the password. firstName string yes By default this field is not required, but if captcha is enabled then this field will be required. It should be the resulting value of a ReCAPTCHA challenge. lastName string yes Not yet fully implemented, but will be used to provide TOTP codes for the user during the authentication flow. timezone string yes The timezone you want your account to be configured for. captcha string no * Can be required if ReCAPTCHA is enabled on the server. betaCode string no * Can be required if the server requires an access code to create an account. agree bool yes Used to denote that the user has agreed to the terms of use for monetr.","title":"Request Body"},{"location":"api/resources/authentication/#response-body_1","text":"Attribute Type Required Description message string no If the user needs to verify their email then this will contain a message that can be presented to the user. requireVerification bool yes If the server requires that the login's email is verified, the fields below this will be omitted in the response body and this will be true. If this is false then the user does not need to verify their email. nextUrl string no If the API requires that the user take some on-boarding action, such as setting up a subscription. There will be a path provided here for the user to be redirected to. user User no If email verification is not required by the server then the newly created user object will be present in the response. isActive bool no Indicated whether or not the user is active, for servers that require billing this will be false initially.","title":"Response Body"},{"location":"api/resources/authentication/#register-examples","text":"Example Register Request curl --request POST \\ --url \"https://my.monetr.app/api/authentication/register\" \\ --header \"content-type: application/json\" \\ --data '{ \"email\": \"email@example.com\", \"password\": \"superSecureP@ssw0rd\", \"firstName\": \"Elliot\", \"lastName\": \"Courant\", \"timezone\": \"America/Chicago\", \"agree\": true }'","title":"Register Examples"},{"location":"api/resources/authentication/#successful_1","text":"If the registration was successful and email verification is not necessary then you'll see a response body similar to the following. 200 Ok { \"nextUrl\" : \"/setup\" , \"user\" : { \"loginId\" : 1234 , \"accountId\" : 1235 , \"userId\" : 1236 , \"login\" : { \"loginId\" : 1234 , \"firstName\" : \"Elliot\" , \"lastName\" : \"Courant\" , }, \"account\" : { \"accountId\" : 1235 , \"timezone\" : \"America/Chicago\" } }, \"isActive\" : true , \"requireVerification\" : false }","title":"Successful"},{"location":"api/resources/authentication/#email-verification-required","text":"If the registration succeeds, but we need to verify the login's email address. 200 Ok { \"message\" : \"A verification email has been sent to your email address, please verify your email.\" , \"requireVerification\" : true } Email addresses are not used to send people content unprompted. Email addresses provide a reliable way to assure uniqueness in users, as well as a way to contact them for things like billing and resetting forgotten passwords. For self-hosted deployments, it is not required that the email address used be one that can actually receive emails. However, this will limit your ability to easily reset forgotten passwords at this time. \u21a9","title":"Email verification required"},{"location":"api/resources/bank_accounts/","text":"Bank Accounts","title":"Bank Accounts"},{"location":"api/resources/bank_accounts/#bank-accounts","text":"","title":"Bank Accounts"},{"location":"api/resources/funding_schedules/","text":"Funding Schedules","title":"Funding Schedules"},{"location":"api/resources/funding_schedules/#funding-schedules","text":"","title":"Funding Schedules"},{"location":"api/resources/links/","text":"Links","title":"Links"},{"location":"api/resources/links/#links","text":"","title":"Links"},{"location":"api/resources/spending/","text":"Spending","title":"Spending"},{"location":"api/resources/spending/#spending","text":"","title":"Spending"},{"location":"api/resources/transactions/","text":"Transactions","title":"Transactions"},{"location":"api/resources/transactions/#transactions","text":"","title":"Transactions"},{"location":"api/resources/user/","text":"User User resources for monetr's REST API. Get Me (Current User) Retrieve information about the currently authenticated user. In the UI this API endpoint is also used to determine if there is a currently authenticated user. Because authentication is stored in HTTP only cookies there is no way for the UI to see if the cookie is present, so upon bootstrapping it makes an API call to this endpoint to determine if there is an authenticated user. HTTP GET /api/users/me","title":"User"},{"location":"api/resources/user/#user","text":"User resources for monetr's REST API.","title":"User"},{"location":"api/resources/user/#get-me-current-user","text":"Retrieve information about the currently authenticated user. In the UI this API endpoint is also used to determine if there is a currently authenticated user. Because authentication is stored in HTTP only cookies there is no way for the UI to see if the cookie is present, so upon bootstrapping it makes an API call to this endpoint to determine if there is an authenticated user. HTTP GET /api/users/me","title":"Get Me (Current User)"},{"location":"developer/Local/","text":"Local Development This guide walks you through setting up a local development environment for monetr on macOS or Linux. If you are using Windows, it is still possible to run the development environment locally. However, it is not documented at this time. Clone the repository To get started, clone the monetr repository from GitHub or from your fork. Shell git clone https://github.com/monetr/monetr.git cd monetr The rest of the commands in this guide are issued from this directory. Dependencies monetr's local development tries to not require anything to be installed on the developer's actual computer. Some tools must be installed though in order to prevent other tools being required. For the most part this is covered by Docker or another container engine. In the future we plan to fully support Podman as a local container engine as well as Docker, but at the moment Docker is recommended. Mac Specific macOS can ship with a version of make that is outdated. It is recommended that you use brew or any other preferred method to install the most recent version of GNUMake on your Mac. This will not break anything that is already using make, but will make sure that your version is compatible with the monetr Makefiles. For example; you should see something like this for your make version. Shell make -v # GNU Make 4.3 # Built for x86_64-apple-darwin20.1.0 # Copyright (C) 1988-2020 Free Software Foundation, Inc. # License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> # This is free software: you are free to change and redistribute it. # There is NO WARRANTY, to the extent permitted by law. Required The following tools are required in order to work on monetr locally. Docker Node (with yarn installed) GNUMake These tools can be installed by running the following command. Shell brew bundle --verbose But they can also be installed manually through your own preferred methods. As long as docker , make and yarn are all available in your PATH variable, the rest of this guide should work just fine. Starting It Up With the above requirements installed. You should be able to spin up the local development environment that runs inside of Docker compose. Shell make develop This will install node modules in the project's directory, as well as start up the containers needed for monetr to run locally. This command will exit automatically once all the containers are healthy. If you want to follow along while it is starting up you can use the make logs command in another terminal inside the project directory. Working Congratulations, you should now have monetr running locally on your computer. The develop task will print out some basic information for you. But if you missed it, you can access the development version of monetr at http://localhost . If you are working on documentation then that can be accessed at http://localhost/documentation . Almost all of monetr's code is setup to hot-reload as you make changes. The documentation, Go code and React UI will all automatically reload as changes are made. Changes to the Go code will not invoke a browser refresh of any sort though, so to observe a new behavior in the API you will need to refresh or make the API call again. Debugging The monetr container running the API has delve included. If you prefer to work using a step-debugger you can connect your editor to it. You will need to reconnect your editor each time it reloads, but it is very easy to make your changes and then hit debug and let your breakpoints be hit. Delve is available via port 2345 on localhost . I'm not sure what the configuration will be for every editor to connect to it; but this is a screenshot of IntellJ IDEA's configuration for remote debugging. Running Tests monetr requires a PostgreSQL instance to be available for Go tests to be run. At the moment there isn't a shorthand script to provision this instance. But an easy way to do so is this: Shell docker run -e POSTGRES_HOST_AUTH_METHOD = trust --name postgres --rm -d -p 5432 :5432 postgres:14 This will start a PostgreSQL instance in Docker (or remove an existing one) and make it available on locahost:5432 as well as not require authentication. This makes it easy for tests to target it. If tests are run via make then nothing more needs to be done. However, if you want to run tests directly from your editor or other tools you will need to run the database migrations. Shell make migrate Will run all schema migrations on the PostgreSQL database on your localhost container. Tests can be run using the go test CLI, or all tests can be run using: Shell make test Cleaning Up Once you have finished your work and you want to take the local development environment down you have a few options. Stopping Stopping allows you to keep the data you have in your development environment for later and come back to it. This can be helpful if you are working on a larger feature or bug. But overall it is recommended to completely wipe and re-provision your development environment each time you start working on something. This keeps the development environment tidy, but does have the downside of not introducing edge cases that might otherwise be harder to find. You can pause your development environment by running: Shell make stop This will stop all of the Docker containers that were started, but will not remove any of their data. When you are ready you can start the containers again with the following command. Shell make start Completely Clean up If you want to completely shut everything down { .annotate } then you can run the following command: Shell make clean This removes the Plaid links that are active, takes down the Docker compose containers, removes their volumes, and removes all temporary directories and generated code in the project directory. It might miss a few things, but this should essentially return the project directory to a state akin to having freshly cloned it. This will delete all of your local development data, including any Plaid links, expenses, goals, etc... *","title":"Local"},{"location":"developer/Local/#local-development","text":"This guide walks you through setting up a local development environment for monetr on macOS or Linux. If you are using Windows, it is still possible to run the development environment locally. However, it is not documented at this time.","title":"Local Development"},{"location":"developer/Local/#clone-the-repository","text":"To get started, clone the monetr repository from GitHub or from your fork. Shell git clone https://github.com/monetr/monetr.git cd monetr The rest of the commands in this guide are issued from this directory.","title":"Clone the repository"},{"location":"developer/Local/#dependencies","text":"monetr's local development tries to not require anything to be installed on the developer's actual computer. Some tools must be installed though in order to prevent other tools being required. For the most part this is covered by Docker or another container engine. In the future we plan to fully support Podman as a local container engine as well as Docker, but at the moment Docker is recommended.","title":"Dependencies"},{"location":"developer/Local/#mac-specific","text":"macOS can ship with a version of make that is outdated. It is recommended that you use brew or any other preferred method to install the most recent version of GNUMake on your Mac. This will not break anything that is already using make, but will make sure that your version is compatible with the monetr Makefiles. For example; you should see something like this for your make version. Shell make -v # GNU Make 4.3 # Built for x86_64-apple-darwin20.1.0 # Copyright (C) 1988-2020 Free Software Foundation, Inc. # License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> # This is free software: you are free to change and redistribute it. # There is NO WARRANTY, to the extent permitted by law.","title":"Mac Specific"},{"location":"developer/Local/#required","text":"The following tools are required in order to work on monetr locally. Docker Node (with yarn installed) GNUMake These tools can be installed by running the following command. Shell brew bundle --verbose But they can also be installed manually through your own preferred methods. As long as docker , make and yarn are all available in your PATH variable, the rest of this guide should work just fine.","title":"Required"},{"location":"developer/Local/#starting-it-up","text":"With the above requirements installed. You should be able to spin up the local development environment that runs inside of Docker compose. Shell make develop This will install node modules in the project's directory, as well as start up the containers needed for monetr to run locally. This command will exit automatically once all the containers are healthy. If you want to follow along while it is starting up you can use the make logs command in another terminal inside the project directory.","title":"Starting It Up"},{"location":"developer/Local/#working","text":"Congratulations, you should now have monetr running locally on your computer. The develop task will print out some basic information for you. But if you missed it, you can access the development version of monetr at http://localhost . If you are working on documentation then that can be accessed at http://localhost/documentation . Almost all of monetr's code is setup to hot-reload as you make changes. The documentation, Go code and React UI will all automatically reload as changes are made. Changes to the Go code will not invoke a browser refresh of any sort though, so to observe a new behavior in the API you will need to refresh or make the API call again.","title":"Working"},{"location":"developer/Local/#debugging","text":"The monetr container running the API has delve included. If you prefer to work using a step-debugger you can connect your editor to it. You will need to reconnect your editor each time it reloads, but it is very easy to make your changes and then hit debug and let your breakpoints be hit. Delve is available via port 2345 on localhost . I'm not sure what the configuration will be for every editor to connect to it; but this is a screenshot of IntellJ IDEA's configuration for remote debugging.","title":"Debugging"},{"location":"developer/Local/#running-tests","text":"monetr requires a PostgreSQL instance to be available for Go tests to be run. At the moment there isn't a shorthand script to provision this instance. But an easy way to do so is this: Shell docker run -e POSTGRES_HOST_AUTH_METHOD = trust --name postgres --rm -d -p 5432 :5432 postgres:14 This will start a PostgreSQL instance in Docker (or remove an existing one) and make it available on locahost:5432 as well as not require authentication. This makes it easy for tests to target it. If tests are run via make then nothing more needs to be done. However, if you want to run tests directly from your editor or other tools you will need to run the database migrations. Shell make migrate Will run all schema migrations on the PostgreSQL database on your localhost container. Tests can be run using the go test CLI, or all tests can be run using: Shell make test","title":"Running Tests"},{"location":"developer/Local/#cleaning-up","text":"Once you have finished your work and you want to take the local development environment down you have a few options.","title":"Cleaning Up"},{"location":"developer/Local/#stopping","text":"Stopping allows you to keep the data you have in your development environment for later and come back to it. This can be helpful if you are working on a larger feature or bug. But overall it is recommended to completely wipe and re-provision your development environment each time you start working on something. This keeps the development environment tidy, but does have the downside of not introducing edge cases that might otherwise be harder to find. You can pause your development environment by running: Shell make stop This will stop all of the Docker containers that were started, but will not remove any of their data. When you are ready you can start the containers again with the following command. Shell make start","title":"Stopping"},{"location":"developer/Local/#completely-clean-up","text":"If you want to completely shut everything down { .annotate } then you can run the following command: Shell make clean This removes the Plaid links that are active, takes down the Docker compose containers, removes their volumes, and removes all temporary directories and generated code in the project directory. It might miss a few things, but this should essentially return the project directory to a state akin to having freshly cloned it. This will delete all of your local development data, including any Plaid links, expenses, goals, etc... *","title":"Completely Clean up"},{"location":"developing/","text":"","title":"Index"},{"location":"help/","text":"Help","title":"Help"},{"location":"help/#help","text":"","title":"Help"}]}