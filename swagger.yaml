definitions:
  controller.ApiError:
    properties:
      error:
        example: something went wrong on our end
        type: string
    type: object
  controller.InvalidBankAccountIdError:
    properties:
      error:
        description: Contains an error telling the user that they must provide a valid
          bank account Id for this request.
        example: invalid bank account Id provided
        type: string
    type: object
  controller.InvalidLinkIdError:
    properties:
      error:
        description: Contains an error telling the user that they must provide a valid
          link Id for this request.
        example: must specify a link Id to retrieve
        type: string
    type: object
  controller.LinkNotFoundError:
    properties:
      error:
        description: This error is returned when the user attempts to retrieve a link
          that does not exist or belong to their account.
        example: 'failed to retrieve link: record does not exist'
        type: string
    type: object
  controller.MalformedJSONError:
    properties:
      error:
        description: Will include a message indicating that the request body is not
          valid JSON.
        example: malformed json
        type: string
    type: object
  controller.SpendingNotFoundError:
    properties:
      error:
        description: This error is returned when the user attempts to retrieve a spending
          object that does not exist or belong to their account.
        example: 'failed to retrieve spending: record does not exist'
        type: string
    type: object
  controller.SpendingTransfer:
    properties:
      amount:
        type: integer
      fromSpendingId:
        type: integer
      toSpendingId:
        type: integer
    type: object
  controller.SubscriptionNotActiveError:
    properties:
      error:
        description: |-
          Will include a message indicating that the user's subscription is not active. Will always be returned with a 402
          status code.
        example: subscription is not active
        type: string
    type: object
  models.Account:
    properties:
      accountId:
        type: integer
      subscriptionActiveUntil:
        type: string
      timezone:
        type: string
    type: object
  models.FundingSchedule:
    properties:
      bankAccountId:
        type: integer
      description:
        type: string
      fundingScheduleId:
        type: integer
      lastOccurrence:
        type: string
      name:
        type: string
      nextOccurrence:
        type: string
      rule:
        example: FREQ=MONTHLY;BYMONTHDAY=15,-1
        type: string
    type: object
  models.Login:
    properties:
      email:
        type: string
      firstName:
        type: string
      isEmailVerified:
        type: boolean
      isPhoneVerified:
        type: boolean
      lastName:
        type: string
      loginId:
        type: integer
    type: object
  models.User:
    properties:
      account:
        $ref: '#/definitions/models.Account'
      accountId:
        type: integer
      firstName:
        type: string
      lastName:
        type: string
      login:
        $ref: '#/definitions/models.Login'
      loginId:
        type: integer
      userId:
        type: integer
    type: object
  repository.Balances:
    properties:
      available:
        type: integer
      bankAccountId:
        type: integer
      current:
        type: integer
      expenses:
        type: integer
      goals:
        type: integer
      safe:
        type: integer
    type: object
  repository.FundingStats:
    properties:
      bankAccountId:
        type: integer
      fundingScheduleId:
        type: integer
      nextExpenseContribution:
        type: integer
      nextGoalContribution:
        type: integer
      numberOfExpenses:
        type: integer
      numberOfGoals:
        type: integer
    type: object
  swag.AfterCheckoutResponse:
    properties:
      isActive:
        description: |-
          IsActive is used to indicate whether the user's subscription is not properly activated. On the UI this is
          propagated to the redux store to allow access to other application routes. If this is false then the subscription
          is not active and API calls to endpoints requiring payment will still fail.
        type: boolean
      message:
        description: |-
          Message is included if there is a problem. Right now this happens if the checkout session is completed but the
          subscription associated with that checkout session is not active.

          **NOTE:** This field is not included if the subscription is active and the after checkout is successful.
        example: Subscription is not active
        type: string
        x-nullable: true
      nextUrl:
        description: |-
          NextURL is used to direct the user to a specific page after their checkout has been completed and verified. This
          should be followed by the web UI. Right now, successful checkouts will redirect to `/` which will prompt the user
          to either configure a Plaid link, or will present them with their budgeting data if there already is some.
        type: string
    type: object
  swag.BalanceResponse:
    properties:
      available:
        description: The available balance of the account, usually the current balance
          minus any pending transactions.
        example: 124000
        type: integer
      bankAccountId:
        description: |-
          The bank account the balances are for. Balances are only per bank account, and not currently calculated at a link
          or global level.
        example: 1234
        type: integer
      current:
        description: The current balance of the account in cents. This typically excludes
          pending transaction values.
        example: 124396
        type: integer
      expenses:
        description: The amount allocated to expense spending objects.
        example: 100000
        type: integer
      goals:
        description: The amount allocated to goal spending objects.
        example: 11650
        type: integer
      safe:
        description: |-
          The amount left over in the bank account after all expense and goal allocations have been subtracted from the
          available balance.
        example: 12350
        type: integer
    type: object
  swag.BankAccountResponse:
    properties:
      accountSubType:
        description: |-
          Sub Type can have numerous values, but given that the application currently only supports depository the most
          common values you will see or use are; checking and savings. Other supported types (albeit untested) are; hsa,
          cd, money market, paypal, prepaid, cash management and ebt.
          More information on these can be found here: https://plaid.com/docs/api/accounts/#account-type-schema
        example: checking
        type: string
      accountType:
        description: |-
          Account Type can be; depository, credit, loan, investment or other. At the time of writing this the application
          will only support depository. Other types may be supported in the future.
        example: depository
        type: string
      availableBalance:
        description: |-
          The balance available in the account represented as whole cents. This is typically the current balance minus the
          total value of all pending transactions. This value is not calculated in the API and is retrieved from Plaid or
          maintained manually for manual links.
        example: 102356
        type: integer
      bankAccountId:
        description: Bank Account ID uniquely identifies this bank account within
          monetr.
        example: 85473
        type: integer
      currentBalance:
        description: The current balance in the account as whole cents without taking
          into consideration any pending transactions.
        example: 102400
        type: integer
      lastUpdated:
        description: |-
          Last Updated is used to keep track of changes to this specific bank account. It is updated when the balances that
          are provided by an external party (like Plaid) are changed. It is not necessarily changed when the Safe-To-Spend
          balance changes or when other fields on the bank account change.
        example: "2021-04-15T00:00:00-05:00"
        type: string
      linkId:
        description: |-
          The numeric Id of the Link this bank account is associated with, if the link is manual then bank bank accounts
          can be created manually via the API. If the Link is associated with Plaid though then bank accounts can only be
          created through the Plaid interface. At the time of writing this there is not a way to add or remove a bank
          account from an existing Plaid Link.
        example: 2345
        type: integer
      mask:
        description: |-
          Last 4 digits of the bank account's account number. We do not store the full bank account number or any other
          sensitive account information.
        example: "9876"
        type: string
      name:
        description: |-
          Name of the account, this is different than the `originalName`. This field can be changed later on while the
          `originalName` field cannot be changed once the account is created.
        example: Checking Account
        type: string
      officialName:
        description: |-
          Official name is only used with bank accounts coming from Plaid. It is another name that Plaid uses for an
          account.
        example: US Bank - Checking Account
        type: string
      originalName:
        description: |-
          The original name of the bank account from when it was created. This name cannot be changed after the bank
          account is created. This is primarily due to bank account's coming from a 3rd party provider like Plaid. But to
          reduce the amount of logic in the application the same rule applies for manual links as well.
        example: 'Checking Account #1'
        type: string
    required:
    - accountSubType
    - accountType
    - bankAccountId
    - linkId
    type: object
  swag.ConfigResponse:
    properties:
      ReCAPTCHAKey:
        description: |-
          The public ReCAPTCHA key that should be used by the frontend to verify some requests. Is omitted if ReCAPTCHA is
          not enabled.
        type: string
        x-nullable: true
      allowForgotPassword:
        description: |-
          **WIP** Not currently used. Will be implemented once proper email verification is working. Will also require that
          the API can send emails to the end user.
        type: boolean
      allowSignUp:
        description: Tells the UI whether or not registration requests will be accepted
          by the UI.
        type: boolean
      requireBetaCode:
        description: |-
          Indicates that registration requests will require a one time use beta code in order to be accepted. Beta codes
          must be generated before hand by an admin.
        type: boolean
      requireLegalName:
        description: |-
          Indicates whether or not the UI should collect just a simple "firstName" or should require that the user provide
          both their first and last name during registration.
        type: boolean
      requirePhoneNumber:
        description: |-
          **WIP** Not currently used. This is meant to be used for doing additional verification of the user's identity to
          streamline the bank account linking process.
        type: boolean
      stripePublicKey:
        description: The public key for Stripe, will be used for stripe elements on
          the frontend. Is omitted if stripe is not enabled.
        type: string
        x-nullable: true
      verifyLogin:
        description: Tells the API client that a ReCAPTCHA verification key will be
          required for login API calls.
        type: boolean
      verifyRegister:
        description: Tells the API client that a ReCAPTCHA verification key will be
          required for registering a new user.
        type: boolean
    type: object
  swag.CreateBankAccountRequest:
    properties:
      accountSubType:
        description: |-
          Sub Type can have numerous values, but given that the application currently only supports depository the most
          common values you will see or use are; checking and savings. Other supported types (albeit untested) are; hsa,
          cd, money market, paypal, prepaid, cash management and ebt.
          More information on these can be found here: https://plaid.com/docs/api/accounts/#account-type-schema
        example: checking
        type: string
      accountType:
        description: |-
          Account Type can be; depository, credit, loan, investment or other. At the time of writing this the application
          will only support depository. Other types may be supported in the future.
        example: depository
        type: string
      availableBalance:
        description: |-
          The balance available in the account represented as whole cents. This is typically the current balance minus the
          total value of all pending transactions. This value is not calculated in the API and is retrieved from Plaid or
          maintained manually for manual links.
        example: 102356
        type: integer
      currentBalance:
        description: The current balance in the account as whole cents without taking
          into consideration any pending transactions.
        example: 102400
        type: integer
      linkId:
        description: |-
          The numeric Id of the Link this bank account is associated with, if the link is manual then bank bank accounts
          can be created manually via the API. If the Link is associated with Plaid though then bank accounts can only be
          created through the Plaid interface. At the time of writing this there is not a way to add or remove a bank
          account from an existing Plaid Link.
        example: 2345
        type: integer
      mask:
        description: |-
          Last 4 digits of the bank account's account number. We do not store the full bank account number or any other
          sensitive account information.
        example: "9876"
        type: string
      name:
        description: |-
          Name of the account, this is different than the `originalName`. This field can be changed later on while the
          `originalName` field cannot be changed once the account is created.
        example: Checking Account
        type: string
      officialName:
        description: |-
          Official name is only used with bank accounts coming from Plaid. It is another name that Plaid uses for an
          account.
        example: US Bank - Checking Account
        type: string
      originalName:
        description: |-
          The original name of the bank account from when it was created. This name cannot be changed after the bank
          account is created. This is primarily due to bank account's coming from a 3rd party provider like Plaid. But to
          reduce the amount of logic in the application the same rule applies for manual links as well.
        example: 'Checking Account #1'
        type: string
    required:
    - accountSubType
    - accountType
    - linkId
    type: object
  swag.CreateCheckoutSessionRequest:
    properties:
      cancelPath:
        description: The path that the user should be returned to if they exit the
          checkout session.
        type: string
      priceId:
        description: |-
          Specify a specific Stripe Price ID to be used when creating the checkout session. If this is left blank then
          the default price will be used for the checkout session.
        example: price_1JFQFuI4uGGnwpgwquHOo34s
        type: string
        x-nullable: true
    type: object
  swag.CreateCheckoutSessionResponse:
    properties:
      sessionId:
        description: |-
          The value returned from stripe once a checkout session has been created. This is used on the frontend for the
          user to checkout and pay for their chosen plan.
        type: string
    type: object
  swag.CreateLinkRequest:
    properties:
      institutionName:
        description: |-
          Specify the institution name for the manual link. When created by the UI this will default to `Manual` and then
          any bank account's created that are manual will automatically be created for this link. Technically a link can
          be created with any name at the moment, but this is meant to be a basic initial implementation for now.
        example: Manual
        type: string
    required:
    - institutionName
    type: object
  swag.CreatePortalSessionResponse:
    properties:
      url:
        description: The URL returned by Stripe for the customer's billing portal.
        type: string
    type: object
  swag.HealthResponse:
    properties:
      apiHealthy:
        description: |-
          This will always be true. If the API is not healthy then an error is returned to the client or the request will
          simply not be served.
        type: boolean
      buildTime:
        description: The time the current REST API executable was built. Typically
          when the container build was initiated.
        type: string
      dbHealthy:
        description: |-
          Indicates whether or not the current API process handling the request can communicate with the PostgreSQL
          database.
        type: boolean
      release:
        description: |-
          Release is only present when a deployment was run for a specific tag. This is only found in acceptance and
          production.
        type: string
        x-nullable: true
      revision:
        description: The Git SHA code for the commit of the deployed REST API.
        type: string
    type: object
  swag.LinkResponse:
    properties:
      createdAt:
        description: The timestamp the link was created in UTC. This cannot be modified
          by the end user.
        example: "2021-05-18T00:26:10.873089Z"
        type: string
      createdByUserId:
        description: |-
          The unique user Id of the user who created this link. If that user is deleted then any links that that user
          created are also deleted. In an "ownership" sort of way. If a user links their bank account and has that shared
          with someone else; but then the user deletes their user. We do not want the other user to still have access to
          the linked bank account.
        example: 94832
        type: integer
      customInstitutionName:
        description: |-
          A custom name for the link's institution that can be set by the end user. Once a link is created the institution
          name cannot be changed directly. But the custom institution name can.
        example: US Bank
        type: string
      errorCode:
        description: |-
          If the link error is due to a problem on Plaid's side, then an error code will be included here to help display
          helpful messages on the frontend to the user.
        example: NO_ACCOUNTS
        type: string
        x-nullable: true
      institutionId:
        description: |-
          Our internal Id for an institution. This is just an abstraction layer on top of Plaid's institution Id but would
          allow us to associate institutions with multiple integrations in the future. It is also meant to keep Plaid Id's
          away from the client's view as much as possible.
        example: 5328
        type: integer
        x-nullable: true
      institutionName:
        description: |-
          The institution name for this link. With the Plaid integration, each link represents a single bank account login
          with an institution. So if you link your monetr account with your U.S. Bank account you would have one link for
          U.S. Bank, and your accounts with that bank would show as bank account's under that link. Manual links are
          intended to be a single "Manual" link per account, with any manually managed bank accounts underneath it.
        example: U.S. Bank
        type: string
      lastSuccessfulUpdate:
        description: |-
          The last time transactions were successfully retrieved for this link. This date does not indicate the most recent
          transaction retrieved, simply the most recent attempt to retrieve transactions that was successful.
        example: "2021-05-21T05:24:12.958309Z"
        type: string
        x-nullable: true
      linkId:
        description: Our unique identifier for a link. This is globally unique across
          all accounts.
        example: 1245
        type: integer
      linkStatus:
        description: |-
          Status of a link, this is used with the Plaid integration to determine whether or not a link has been completely
          setup. If a link is in an Unknown or Pending state then the link has not had it's transactions retrieved yet from
          Plaid. Unknown might indicate there is a problem with the link itself.
          * 0 - `Unknown`: Indicates the link is not setup or ready to use, might also indicate there is a problem with the link.
          * 1 - `Pending`: The link is not ready to use and is being setup by the Plaid integration.
          * 2 - `Setup`: The link is ready to use. This is the default state for manual links.
          * 3 - `Error`: The link is in an error state, this can happen if the Plaid link is experiencing problems.
        enum:
        - 0
        - 1
        - 2
        example: 2
        type: integer
      linkType:
        description: |-
          The type of link this object is. This indicates whether or not bank accounts within this link are managed
          manually by an end user, or managed automatically by a Plaid integration.
          * 0 - `Unknown`: This would indicate an error state with the link.
          * 1 - `Plaid`: This link is automatically managed by the Plaid integration.
          * 2 - `Manual`: This link is managed manually by the end user.
        enum:
        - 1
        - 2
        example: 2
        type: integer
      updatedAt:
        description: |-
          The last time this link was updated. Currently this field is not really maintained, eventually this timestamp
          will indicate the last time a sync occurred between monetr and Plaid. Manual links don't change this field at
          all. **OLD**
        example: "2021-05-21T05:24:12.958309Z"
        type: string
      updatedByUserId:
        description: The user who last updated this link. Currently this field is
          not maintained well and should not be trusted.
        example: 89547
        type: integer
        x-nullable: true
    type: object
  swag.LoginRequest:
    properties:
      captcha:
        description: ReCAPTCHA value from validation. Required if `verifyLogin` is
          enabled on the server.
        example: 03AGdBq266UHyZ62gfKGJozRNQz17oIhSlj9S9S...
        type: string
        x-nullable: true
      email:
        description: The email associated with our login. Is unique and case-insensitive.
        example: your.email@gmail.com
        type: string
      password:
        description: Your login password.
        example: tHEBeSTPaSsWOrdYoUCaNCOmeUpWiTH
        type: string
    type: object
  swag.LoginResponse:
    properties:
      isActive:
        description: |-
          Indicates whether or not the user that has been authenticated has an active subscription. The UI will use this to
          redirect the user to a payment page if their subscription is not active. If this field is not present then
          billing is either not enabled. Or the user's subscription is active and no action needs to be taken.
        example: true
        type: boolean
        x-nullable: true
      nextUrl:
        description: |-
          Next URL is provided by the API if the user needs to be redirected immediately after authenticating. This is used
          in conjunction with the `isActive` field for directing users to the payment page gracefully. If this field is not
          present then billing is either not enabled. Or the user's subscription is active and no action needs to be taken.
          It is possible that this field may be used in the future independent of `isActive` so logic should be build for
          it regardless of the `isActive` field's presence.
        example: /account/subscribe
        type: string
        x-nullable: true
      token:
        description: A JWT that can be used to make authenticated requests for the
          user.
        example: eyJhbGciOiJI...
        type: string
    type: object
  swag.NewPlaidTokenCallbackRequest:
    properties:
      accountIds:
        example:
        - KEdQjMo39lFwXKqKLlqEt6R3AgBWW1C6l8vDn
        - r3DVlexNymfJkgZgonZeSQ4n5Koqqjtyrwvkp
        items:
          type: string
        type: array
      institutionId:
        example: ins_117212
        type: string
      institutionName:
        example: Navy Federal Credit Union
        type: string
      publicToken:
        type: string
    type: object
  swag.NewSpendingRequest:
    properties:
      bankAccountId:
        description: |-
          Indicates which bank account the spending object is associated with. All spending objects must be associated with
          one bank account. This value cannot be changed. It can only be set when the spending object is created.
        example: 8437
        type: integer
      description:
        description: |-
          Currently used as a description of the recurrence rule so that it does not need to be "generated" with each
          pattern. This is not intended to be used by the end user and is generated by the UI when the spending object is
          created or updated. However it can be modified if you were to send this request manually. It has no side affects,
          it is simply used to better display data to the end user at this time.
        example: 1st of every month
        type: string
      fundingScheduleId:
        description: The desired funding schedule of the spending. Changing this will
          trigger a recalculation of the spending object.
        example: 8539
        type: integer
      isPaused:
        description: |-
          Indicate whether or not this spending object should receive contributions on it's funding schedule occurrence. If
          the spending object is paused, the next time its funding schedule occurs, no additional amount will be allocated
          to this spending object.
        type: boolean
      name:
        description: Human friendly name of the spending object. Something like "Amazon
          Prime". But can be anything.
        example: Amazon Prime
        type: string
      nextRecurrence:
        description: |-
          The next time this expense or goal is due. For expenses this date is recalculated each time this date passes.
          For goals this date is somewhat static. It can be modified but is not automatically recalculated once it is
          reached. Changing this date would recalculate contributions to this spending object. These dates should be
          provided in RFC3339 format with the timezone of the client included. The timezone is important as its used to
          calculate the next time this expense recurs.
        example: "2021-05-01T00:00:00-05:00"
        type: string
      recurrenceRule:
        description: |-
          Recurrence rule telling the budgeting system how often this expense should be used. This helps the budgeting
          system recalculate the next recurrence date each time an expense's recurrence date is reached. More information
          about the format of the rule can be found here: https://tools.ietf.org/html/rfc5545
          Note: These rules should be provided with the `RRULE:` prefix omitted if the tool you are using to generate the
          rule strings include it. These rules are parsed using this library: https://github.com/teambition/rrule-go
          Changing this rule would recalculate contributions to this spending object.
        example: FREQ=MONTHLY;BYMONTHDAY=1
        type: string
        x-nullable: true
      spendingType:
        description: |-
          The type of spending object this is. This cannot be changed. It can only be set when the spending object is created.
          * 0 - Expense, the object will occur on a regular basis based on its recurrence rule. Spending from an expense will always change its next allocation amount.
          * 1 - Goal, the object will allocate until it reaches it's target value and then stop. It can be spent from while it is still incomplete without changing the allocation amount.
        enum:
        - 0
        - 1
        example: 0
        type: integer
      targetAmount:
        description: |-
          How much the spending object should allocate by the next recurrence date. For goals this target is reached once
          and is considered complete, even if part of the total amount has been spent. For expenses this amount is
          attempted to be allocated before the recurrence date regardless of spending. This means that even if a
          transaction is spent from this spending object the allocation system will still allocate more funds to this
          expense if the transaction was spent before it is technically due AND the funding schedule occurs before the
          specified next recurrence date. Changing this amount will recalculate contributions to this spending object.
        example: 1395
        minimum: 1
        type: integer
    required:
    - bankAccountId
    - fundingScheduleId
    - name
    - spendingType
    - targetAmount
    type: object
  swag.PlaidNewLinkTokenResponse:
    properties:
      linkToken:
        description: |-
          The link token that will be used for the end user to authenticate to their bank using plaid. These tokens do
          expire. They are also specific to a single environment. See: https://plaid.com/docs/api/tokens/#linktokencreate
        example: link-environment-6da2c37f-6aa0....
        type: string
    type: object
  swag.PlaidTokenCallbackResponse:
    properties:
      jobId:
        description: |-
          If webhooks are not enabled then a job Id is returned with the response. This job Id can also be used to check
          for initial transactions being retrieved.
        type: string
        x-nullable: true
      linkId:
        description: |-
          LinkId will always be included in a successful response. It can be used when webhooks are enabled to wait for the
          initial transactions to be retrieved.
        type: integer
      success:
        type: boolean
    type: object
  swag.RegisterRequest:
    properties:
      betaCode:
        description: |-
          A beta code given to you to test or demo the application. This is primarily used in an environment where it would
          cost money to link a bank account with a user. But testing against real bank accounts is necessary. So to prevent
          anyone just creating accounts and linking their bank account for free, we use beta codes to verify that they are
          someone who is supposed to be there. Leave this null or don't include at all if it is not required by the API
          configuration.
        example: F2917D98-024633A8
        type: string
        x-nullable: true
      captcha:
        description: ReCAPTCHA value from validation. Required if `verifyRegistration`
          is enabled on the server.
        example: 03AGdBq266UHyZ62gfKGJozRNQz17oIhSlj9S9S...
        type: string
        x-nullable: true
      email:
        description: |-
          The email address you want to have associated with your login and user. This is only used for verification
          purposes like resetting a forgotten password. Or for billing. You are **never** added to any mailing list here.
        example: your.email@yahoo.com
        type: string
      firstName:
        description: |-
          Your first name. Currently required for registration but might be able to make it optional in the future for
          manual only registrations (not plaid linked). And people who are on a free trial.
        example: Doug
        type: string
      lastName:
        description: |-
          Your last name or "family" name. Whether or not this is required depends on the plaid configuration, when we are
          linking bank accounts to users we do need the user's full legal name.
        example: Dimmadome
        type: string
        x-nullable: true
      password:
        description: Your desired login password.
        example: tHEBeSTPaSsWOrdYoUCaNCOmeUpWiTH
        type: string
      timezone:
        description: |-
          Your timezone in the "TZ Database Name" format. This is used for determining when midnight is for funding
          schedules to be processed for your account.
        example: America/Chicago
        type: string
    type: object
  swag.RegisterResponse:
    properties:
      nextUrl:
        description: |-
          This is a work in progress field, the end goal being that the API could easily direct the UI to different steps
          based on the state of a user. If they require MFA then direct them to an MFA screen. If their subscription is
          expired direct them to a subscription screen. But at the moment it is not used.
        example: /setup
        type: string
      token:
        description: A JWT that can be used to make authenticated requests for the
          newly created user.
        example: eyJhbGciOiJI...
        type: string
      user:
        $ref: '#/definitions/models.User'
        description: The created user and some basic information. This allows the
          UI to skip an API call to the /users/me endpoint.
    type: object
  swag.SpendingResponse:
    properties:
      bankAccountId:
        description: |-
          Indicates which bank account the spending object is associated with. All spending objects must be associated with
          one bank account. This value cannot be changed. It can only be set when the spending object is created.
        example: 8437
        type: integer
      currentAmount:
        description: |-
          The amount that has been allocated to the spending object. This amount is deducted from the available balance of
          the bank account the spending object is associated with. It can be modified by spending a transaction from a
          spending object. Or by transferring/allocating funds to a spending object. It cannot be modified directly.
        example: 1395
        type: integer
      dateCreated:
        description: When the spending object was initially created. This value cannot
          be changed.
        example: "2021-04-04T12:43:23-05:00"
        type: string
      description:
        description: |-
          Currently used as a description of the recurrence rule so that it does not need to be "generated" with each
          pattern. This is not intended to be used by the end user and is generated by the UI when the spending object is
          created or updated. However it can be modified if you were to send this request manually. It has no side affects,
          it is simply used to better display data to the end user at this time.
        example: 1st of every month
        type: string
      fundingScheduleId:
        description: The desired funding schedule of the spending. Changing this will
          trigger a recalculation of the spending object.
        example: 8539
        type: integer
      isBehind:
        description: |-
          If a spending object cannot reach its `targetAmount` by the date that it is due on its funding schedule alone,
          then the spending object is marked as "behind". This means that without manually transferring funds to the
          spending object it will not have enough funds to fulfill its target by the due date. This value is calculated
          automatically and cannot be changed.
        example: false
        type: boolean
      isPaused:
        description: |-
          Indicate whether or not this spending object should receive contributions on it's funding schedule occurrence. If
          the spending object is paused, the next time its funding schedule occurs, no additional amount will be allocated
          to this spending object.
        type: boolean
      lastRecurrence:
        description: |-
          The last time this spending object reset. A spending object is reset each time its `nextRecurrence` date elapses,
          the `nextRecurrence` date is then moved to this field. This field is null if a spending object has never elapsed
          before. Or if the spending object is a goal. This field is maintained automatically and cannot be modified.
        example: "2021-04-15T00:00:00-05:00"
        type: string
        x-nullable: true
      name:
        description: Human friendly name of the spending object. Something like "Amazon
          Prime". But can be anything.
        example: Amazon Prime
        type: string
      nextRecurrence:
        description: |-
          The next time this expense or goal is due. For expenses this date is recalculated each time this date passes.
          For goals this date is somewhat static. It can be modified but is not automatically recalculated once it is
          reached. Changing this date would recalculate contributions to this spending object. These dates should be
          provided in RFC3339 format with the timezone of the client included. The timezone is important as its used to
          calculate the next time this expense recurs.
        example: "2021-05-01T00:00:00-05:00"
        type: string
      recurrenceRule:
        description: |-
          Recurrence rule telling the budgeting system how often this expense should be used. This helps the budgeting
          system recalculate the next recurrence date each time an expense's recurrence date is reached. More information
          about the format of the rule can be found here: https://tools.ietf.org/html/rfc5545
          Note: These rules should be provided with the `RRULE:` prefix omitted if the tool you are using to generate the
          rule strings include it. These rules are parsed using this library: https://github.com/teambition/rrule-go
          Changing this rule would recalculate contributions to this spending object.
        example: FREQ=MONTHLY;BYMONTHDAY=1
        type: string
        x-nullable: true
      spendingId:
        description: The spending Id of the goal or expense that you are updating.
        example: 4364
        type: integer
      spendingType:
        description: |-
          The type of spending object this is. This cannot be changed. It can only be set when the spending object is created.
          * 0 - Expense, the object will occur on a regular basis based on its recurrence rule. Spending from an expense will always change its next allocation amount.
          * 1 - Goal, the object will allocate until it reaches it's target value and then stop. It can be spent from while it is still incomplete without changing the allocation amount.
        enum:
        - 0
        - 1
        example: 0
        type: integer
      targetAmount:
        description: |-
          How much the spending object should allocate by the next recurrence date. For goals this target is reached once
          and is considered complete, even if part of the total amount has been spent. For expenses this amount is
          attempted to be allocated before the recurrence date regardless of spending. This means that even if a
          transaction is spent from this spending object the allocation system will still allocate more funds to this
          expense if the transaction was spent before it is technically due AND the funding schedule occurs before the
          specified next recurrence date. Changing this amount will recalculate contributions to this spending object.
        example: 1395
        minimum: 1
        type: integer
      usedAmount:
        description: |-
          Used amount is only valid for goals at this time. It indicates how much has been spent from the spending object,
          and is used to keep track of the goal's progress to its target without affecting the accuracy of the
          `currentAmount` field. A goal is complete when the `currentAmount` + `usedAmount` = `targetAmount`.
        example: 1043
        type: integer
    required:
    - bankAccountId
    - fundingScheduleId
    - fundingScheduleId
    - name
    - name
    - spendingId
    - spendingType
    - targetAmount
    - targetAmount
    type: object
  swag.TransactionResponse:
    properties:
      amount:
        description: |-
          The amount of the transaction in cents. This is used when a transaction is "spent-from" a spending object.Validate

          **NOTE**: `amount` cannot be updated on transactions that were created from Plaid.
        minimum: 1
        type: integer
      authorizedDate:
        description: |-
          Authorized date comes from Plaid, but to my knowledge will not be populated in this API until we support UK
          banks.
          > This field is only populated for UK institutions. For institutions in other countries, will be null.

          https://plaid.com/docs/api/products/#transactions-get-response-authorized-datetime_transactions

          **NOTE**: `authorizedDate` cannot be updated on transactions that were created from Plaid.
        type: string
        x-nullable: true
      bankAccountId:
        description: |-
          The Id of bank account that this transaction is associated with. A transaction can only be associated with a
          single bank account. It is required when creating a new transaction.
        example: 43872
        type: integer
      categories:
        description: |-
          Represents a path of categories that represents what type of spending this transaction was. For example:
          `["Restaurants", "Fast Food"]`. A transaction could just have the category of `Restaurants`, but it can have a
          child category of `Fast Food` as well. This field can be maintained directly by the end user. But is typically
          generated when the transaction is created from Plaid.
        example:
        - Restaurants
        - Fast Food
        items:
          type: string
        type: array
        x-nullable: true
      createdAt:
        description: |-
          Specifies the timestamp that the transaction was created within monetr and is used to help sort transactions as
          the transaction `date` does not contain a time of day.
        example: "2021-04-15T00:00:00-05:00"
        type: string
      date:
        description: |-
          Date is the date the transaction was created. This date cannot change on this particular transaction Id, but if
          the transaction is in a `Pending` state then when the transaction clears a new transaction can be created and
          this transaction would be deleted. This can change the `date` field when this occurs.

          **NOTE**: `date` cannot be updated on transactions that were created from Plaid.
        example: "2021-04-15T00:00:00-05:00"
        type: string
      isPending:
        description: |-
          Indicates whether or not the transaction is pending. Pending transactions are deleted when they clear their
          pending status and if the transaction completes, a new transaction with a non-pending status is created. If the
          transaction clears its pending status but is not complete (refunded), then it is simply deleted. This is only
          the case with Plaid transactions, manual transactions can be updated between pending and non-pending in place.

          **NOTE**: `isPending` cannot be updated on transactions that were created from Plaid.
        example: true
        type: boolean
      merchantName:
        description: The merchant name that was specified by the user, or was imported
          with the transaction's data from Plaid.
        type: string
      name:
        description: |-
          The transaction name that the user has customized, or that has been generated by monetr when the transaction was
          imported from Plaid.
        type: string
      originalCategories:
        description: |-
          Original categories from when the transaction was created by the user, or imported from Plaid. this field cannot
          be changed after the transaction has been created.
        example:
        - Restaurants
        - Fast Food
        items:
          type: string
        type: array
        x-nullable: true
      originalMerchantName:
        description: |-
          Original merchant name is immutable. It can only be set when the transaction is created. This is used to preserve
          some data about the original transaction and is primarily used by the Plaid integration. It is not required for
          manually created transactions.
        example: Uber
        type: string
      originalName:
        description: |-
          The original name of the transaction when it was created. This is the name specified when the user manually
          created the transaction, or when the transaction was imported from Plaid. This field cannot be changed after the
          transaction is created.
        example: Uber 072515 SF**POOL**
        type: string
      spendingAmount:
        description: |-
          SpendingAmount is the amount deducted from the expense this transaction was spent from. This is used when a
          transaction is more than the expense currently has allocated. If the transaction were to be deleted or changed we
          want to make sure we return the correct amount to the expense.
        example: 800
        type: integer
        x-nullable: true
      spendingId:
        description: |-
          The expense or goal's spending Id that this transaction was spent from. When this is updated the spending amount
          will also be updated here. On the spending object the allocated amount will be subtracted from up to the amount
          of this transaction. But the spending objects allocated amount will never be negative. If you have a transaction
          that is $10.00 and you spend it from a spending object with only $8.00 allocated, then only $8.00 will be
          subtracted from the spending object. Those $8.00 will be represented by the `spendingAmount` field here.
        example: 54312
        type: integer
        x-nullable: true
      transactionId:
        description: The unique Id for the transaction within monetr. This is globally
          unique.
        example: 58732
        type: integer
    required:
    - amount
    - amount
    - bankAccountId
    - originalName
    - transactionId
    type: object
  swag.TransactionUpdateResponse:
    properties:
      balance:
        $ref: '#/definitions/swag.BalanceResponse'
        description: |-
          The new balances for the bank account that the transaction belongs to. This is returned so that the UI can easily
          see the affects of updating a transaction's spending object right away.
      transaction:
        $ref: '#/definitions/swag.TransactionResponse'
        description: The resulting transaction object with any calculated changes
          applied.
      updatedExpenses:
        description: |-
          Will contain up to two spending objects. Includes the spending objects that were updated if the `spendingId`
          field of the transaction was changed in the request.
        items:
          $ref: '#/definitions/swag.SpendingResponse'
        type: array
    type: object
  swag.TransferResponse:
    properties:
      balance:
        $ref: '#/definitions/swag.BalanceResponse'
        description: The balance of the bank account after the transferred allocations
          have been recalculated.
      spending:
        description: |-
          An array of spending objects that were updated during the transfer. By persisting these to the client's memory
          the state of the spending objects is properly maintained.
        items:
          $ref: '#/definitions/swag.SpendingResponse'
        type: array
    type: object
  swag.UpdateLinkRequest:
    properties:
      customInstitutionName:
        description: |-
          A custom name for the link's institution that can be set by the end user. Once a link is created the institution
          name cannot be changed directly. But the custom institution name can.
        example: US Bank
        type: string
    type: object
  swag.UpdatePlaidTokenCallbackRequest:
    properties:
      linkId:
        type: integer
      publicToken:
        type: string
    type: object
  swag.UpdateSpendingRequest:
    properties:
      description:
        description: |-
          Currently used as a description of the recurrence rule so that it does not need to be "generated" with each
          pattern. This is not intended to be used by the end user and is generated by the UI when the spending object is
          created or updated. However it can be modified if you were to send this request manually. It has no side affects,
          it is simply used to better display data to the end user at this time.
        example: 1st of every month
        type: string
      fundingScheduleId:
        description: The desired funding schedule of the spending. Changing this will
          trigger a recalculation of the spending object.
        example: 8539
        type: integer
      isPaused:
        description: |-
          Indicate whether or not this spending object should receive contributions on it's funding schedule occurrence. If
          the spending object is paused, the next time its funding schedule occurs, no additional amount will be allocated
          to this spending object.
        type: boolean
      name:
        description: Human friendly name of the spending object. Something like "Amazon
          Prime". But can be anything.
        example: Amazon Prime
        type: string
      nextRecurrence:
        description: |-
          The next time this expense or goal is due. For expenses this date is recalculated each time this date passes.
          For goals this date is somewhat static. It can be modified but is not automatically recalculated once it is
          reached. Changing this date would recalculate contributions to this spending object. These dates should be
          provided in RFC3339 format with the timezone of the client included. The timezone is important as its used to
          calculate the next time this expense recurs.
        example: "2021-05-01T00:00:00-05:00"
        type: string
      recurrenceRule:
        description: |-
          Recurrence rule telling the budgeting system how often this expense should be used. This helps the budgeting
          system recalculate the next recurrence date each time an expense's recurrence date is reached. More information
          about the format of the rule can be found here: https://tools.ietf.org/html/rfc5545
          Note: These rules should be provided with the `RRULE:` prefix omitted if the tool you are using to generate the
          rule strings include it. These rules are parsed using this library: https://github.com/teambition/rrule-go
          Changing this rule would recalculate contributions to this spending object.
        example: FREQ=MONTHLY;BYMONTHDAY=1
        type: string
        x-nullable: true
      spendingId:
        description: The spending Id of the goal or expense that you are updating.
        example: 4364
        type: integer
      targetAmount:
        description: |-
          How much the spending object should allocate by the next recurrence date. For goals this target is reached once
          and is considered complete, even if part of the total amount has been spent. For expenses this amount is
          attempted to be allocated before the recurrence date regardless of spending. This means that even if a
          transaction is spent from this spending object the allocation system will still allocate more funds to this
          expense if the transaction was spent before it is technically due AND the funding schedule occurs before the
          specified next recurrence date. Changing this amount will recalculate contributions to this spending object.
        example: 1395
        minimum: 1
        type: integer
    required:
    - fundingScheduleId
    - name
    - spendingId
    - targetAmount
    type: object
  swag.UpdateTransactionRequest:
    properties:
      amount:
        description: |-
          The amount of the transaction in cents. This is used when a transaction is "spent-from" a spending object.Validate

          **NOTE**: `amount` cannot be updated on transactions that were created from Plaid.
        minimum: 1
        type: integer
      authorizedDate:
        description: |-
          Authorized date comes from Plaid, but to my knowledge will not be populated in this API until we support UK
          banks.
          > This field is only populated for UK institutions. For institutions in other countries, will be null.

          https://plaid.com/docs/api/products/#transactions-get-response-authorized-datetime_transactions

          **NOTE**: `authorizedDate` cannot be updated on transactions that were created from Plaid.
        type: string
        x-nullable: true
      categories:
        description: |-
          Represents a path of categories that represents what type of spending this transaction was. For example:
          `["Restaurants", "Fast Food"]`. A transaction could just have the category of `Restaurants`, but it can have a
          child category of `Fast Food` as well. This field can be maintained directly by the end user. But is typically
          generated when the transaction is created from Plaid.
        example:
        - Restaurants
        - Fast Food
        items:
          type: string
        type: array
        x-nullable: true
      date:
        description: |-
          Date is the date the transaction was created. This date cannot change on this particular transaction Id, but if
          the transaction is in a `Pending` state then when the transaction clears a new transaction can be created and
          this transaction would be deleted. This can change the `date` field when this occurs.

          **NOTE**: `date` cannot be updated on transactions that were created from Plaid.
        example: "2021-04-15T00:00:00-05:00"
        type: string
      isPending:
        description: |-
          Indicates whether or not the transaction is pending. Pending transactions are deleted when they clear their
          pending status and if the transaction completes, a new transaction with a non-pending status is created. If the
          transaction clears its pending status but is not complete (refunded), then it is simply deleted. This is only
          the case with Plaid transactions, manual transactions can be updated between pending and non-pending in place.

          **NOTE**: `isPending` cannot be updated on transactions that were created from Plaid.
        example: true
        type: boolean
      merchantName:
        description: The merchant name that was specified by the user, or was imported
          with the transaction's data from Plaid.
        type: string
      name:
        description: |-
          The transaction name that the user has customized, or that has been generated by monetr when the transaction was
          imported from Plaid.
        type: string
      spendingId:
        description: |-
          The expense or goal's spending Id that this transaction was spent from. When this is updated the spending amount
          will also be updated here. On the spending object the allocated amount will be subtracted from up to the amount
          of this transaction. But the spending objects allocated amount will never be negative. If you have a transaction
          that is $10.00 and you spend it from a spending object with only $8.00 allocated, then only $8.00 will be
          subtracted from the spending object. Those $8.00 will be represented by the `spendingAmount` field here.
        example: 54312
        type: integer
        x-nullable: true
    required:
    - amount
    type: object
host: api.monetr.app
info:
  contact:
    name: Support
    url: http://github.com/monetr/rest-api
  description: This is the REST API for our budgeting application.
  license:
    name: Business Source License 1.1
    url: https://github.com/monetr/rest-api/blob/main/LICENSE
  title: monetr's REST API
  version: "0.0"
paths:
  /authentication/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user.
      operationId: login
      parameters:
      - description: User Login Request
        in: body
        name: Login
        required: true
        schema:
          $ref: '#/definitions/swag.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      summary: Login
      tags:
      - Authentication
  /authentication/register:
    post:
      consumes:
      - application/json
      description: Register creates a new login, user and account. Logins are used
        for authentication, users tie authentication to an account, and accounts hold
        budgeting data.
      operationId: register
      parameters:
      - description: New User Registration
        in: body
        name: Registration
        required: true
        schema:
          $ref: '#/definitions/swag.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      summary: Register
      tags:
      - Authentication
  /bank_accounts:
    get:
      description: Lists all of the bank accounts for the currently authenticated
        user.
      operationId: list-all-bank-accounts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/swag.BankAccountResponse'
            type: array
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: List All Bank Accounts
      tags:
      - Bank Accounts
    post:
      consumes:
      - application/json
      description: 'Create a bank account for the provided link. Note: Bank accounts
        can only be created this way for manual links. Attempting to create a bank
        account for a link that is associated with Plaid will result in an error.'
      operationId: create-bank-account
      parameters:
      - description: New Bank Account
        in: body
        name: newBankAccount
        required: true
        schema:
          $ref: '#/definitions/swag.CreateBankAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.BankAccountResponse'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Create Bank Account
      tags:
      - Bank Accounts
  /bank_accounts/{bankAccountId}/balances:
    get:
      description: Get the balances for the specified bank account (including calculated
        balances).
      operationId: get-bank-account-balances
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repository.Balances'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Get Bank Account Balances
      tags:
      - Bank Accounts
  /bank_accounts/{bankAccountId}/funding_schedules:
    get:
      description: List all of the funding schedule's for the current bank account.
      operationId: list-funding-schedules
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FundingSchedule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: List Funding Schedules
      tags:
      - Funding Schedules
    post:
      consumes:
      - application/json
      operationId: create-funding-schedule
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: New Funding Schedule
        in: body
        name: fundingSchedule
        required: true
        schema:
          $ref: '#/definitions/models.FundingSchedule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FundingSchedule'
        "400":
          description: Malformed JSON or invalid RRule.
          schema:
            $ref: '#/definitions/controller.ApiError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Failed to persist data.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Create Funding Schedule
      tags:
      - Funding Schedules
  /bank_accounts/{bankAccountId}/funding_schedules/stats:
    get:
      description: Retrieve information about how much spending objects will receive
        on the next funding schedule.
      operationId: get-funding-status
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repository.FundingStats'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Get Funding Stats
      tags:
      - Funding Schedules
  /bank_accounts/{bankAccountId}/spending:
    get:
      consumes:
      - application/json
      description: List all of the spending for the specified bank account.
      operationId: list-spending
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/swag.SpendingResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: List Spending
      tags:
      - Spending
    post:
      consumes:
      - application/json
      description: Create an spending for the specified bank account.
      operationId: create-spending
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: New spending
        in: body
        name: Spending
        required: true
        schema:
          $ref: '#/definitions/swag.NewSpendingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.SpendingResponse'
        "400":
          description: Malformed JSON or invalid RRule.
          schema:
            $ref: '#/definitions/controller.ApiError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Failed to persist data.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Create Spending
      tags:
      - Spending
    put:
      consumes:
      - application/json
      description: Update an existing spending object. Some changes may cause the
        spending object to be recalculated.
      operationId: update-spending
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: Updated spending
        in: body
        name: Spending
        required: true
        schema:
          $ref: '#/definitions/swag.UpdateSpendingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.SpendingResponse'
        "400":
          description: Malformed JSON or invalid RRule.
          schema:
            $ref: '#/definitions/controller.ApiError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Failed to persist data.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Update Spending
      tags:
      - Spending
  /bank_accounts/{bankAccountId}/spending/{spendingId}:
    delete:
      consumes:
      - application/json
      description: Delete a spending object. This will set any transactions that have
        spent from this object back to spent from "Safe-To-Spend". If the spending
        object is successfully deleted, this endpoint simply returns 200 with an empty
        body.
      operationId: delete-spending
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: Spending ID to be deleted
        in: path
        name: spendingId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Malformed JSON or invalid RRule.
          schema:
            $ref: '#/definitions/controller.ApiError'
        "500":
          description: Failed to persist data.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Delete Spending
      tags:
      - Spending
  /bank_accounts/{bankAccountId}/spending/transfer:
    post:
      consumes:
      - application/json
      description: Transfer allocated funds to or from a spending object.
      operationId: transfer-spending
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: Transfer
        in: body
        name: Spending
        required: true
        schema:
          $ref: '#/definitions/controller.SpendingTransfer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/swag.TransferResponse'
            type: array
        "400":
          description: Malformed JSON or invalid RRule.
          schema:
            $ref: '#/definitions/controller.ApiError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Failed to persist data.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Transfer To or From Spending
      tags:
      - Spending
  /bank_accounts/{bankAccountId}/transactions:
    get:
      description: |-
        Lists the transactions for the specified bank account Id. Transactions are returned sorted by the date
        they were authorized (descending) and then by their numeric Id (descending). This means that
        transactions that were first seen later will be higher in the list than they may have actually occurred.
      operationId: list-transactions
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: Specifies the number of transactions to return in the result,
          default is 25. Max is 100.
        in: query
        name: limit
        type: integer
      - description: The number of transactions to skip before returning any.
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/swag.TransactionResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: List Transactions
      tags:
      - Transactions
  /bank_accounts/{bankAccountId}/transactions/{transactionId}:
    post:
      consumes:
      - application/json
      description: Updates the provided transaction.
      operationId: update-transactions
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: 'TransactionId '
        in: path
        name: transactionId
        required: true
        type: integer
      - description: Updated transaction
        in: body
        name: Transaction
        required: true
        schema:
          $ref: '#/definitions/swag.UpdateTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/swag.TransactionUpdateResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Update Transaction
      tags:
      - Transactions
  /bank_accounts/{bankAccountId}/transactions/spending/{spendingId}:
    get:
      description: Lists the transactions for the specified spending Id within the
        specified bank account Id.
      operationId: list-transactions-for-spending
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: Spending ID
        in: path
        name: spendingId
        required: true
        type: integer
      - description: Specifies the number of transactions to return in the result,
          default is 25. Max is 100.
        in: query
        name: limit
        type: integer
      - description: The number of transactions to skip before returning any.
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/swag.TransactionResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.SpendingNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: List Transactions For Spending
      tags:
      - Transactions
  /billing/checkout/{checkoutSessionId}:
    get:
      description: After completing a checkout session, retrieve the outcome of the
        checkout session and persist it immediately.
      operationId: get-post-checkout-session-details
      parameters:
      - description: Stripe Checkout Session ID
        in: path
        name: checkoutSessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.AfterCheckoutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Get Post-Checkout Session Details
      tags:
      - Billing
  /billing/create_checkout:
    post:
      consumes:
      - application/json
      description: Create a checkout session for Stripe. This is used to manage new
        subscriptions to monetr and offload the complexity of managing subscriptions.
        **Note:** You cannot create a checkout session if you have an active subscrption.
      operationId: create-checkout-session
      parameters:
      - description: New Checkout Session
        in: body
        name: createCheckoutSession
        required: true
        schema:
          $ref: '#/definitions/swag.CreateCheckoutSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.CreateCheckoutSessionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Create Checkout Session
      tags:
      - Billing
  /billing/portal:
    get:
      description: Create a Stripe portal session for managing the subscription and
        return the session Id to the client. The client can then redirect the user
        to this session to manage the monetr subscription completely within Stripe.
      operationId: get-stripe-portal
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/swag.CreatePortalSessionResponse'
            type: array
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Get Stripe Portal
      tags:
      - Billing
  /config:
    get:
      description: Provides the configuration that should be used by the frontend
        application or UI.
      operationId: app-config
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.ConfigResponse'
      summary: Get Config
      tags:
      - Config
  /health:
    get:
      description: Just a simple health check endpoint. This is not used at all in
        the frontend of the application and is meant to be used in containers to determine
        if the primary API listener is working.
      operationId: api-health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.HealthResponse'
      summary: Check API Health
      tags:
      - Health
  /link/wait/{linkId:uint64}:
    get:
      description: |-
        This endpoint is used to "wait" for all of the data associated with a link to be deleted. If the link is
        is already deleted then a simple **200** is returned to the caller. If the link is not deleted then this
        endpoint will block for up to 30 seconds at a time while it waits for the link to be removed. If it is
        removed while the endpoint is blocking then it will return 200 at that time.
      operationId: wait-for-link-deletion
      parameters:
      - description: Link ID for the link that was/is being removed.
        in: path
        name: linkId
        required: true
        type: integer
      responses:
        "200":
          description: ""
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "408":
          description: ""
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Wait For Link Deletion
      tags:
      - Links
  /links:
    get:
      description: Lists all of the links for the currently authenticated user.
      operationId: list-all-links
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/swag.LinkResponse'
            type: array
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: List All Links
      tags:
      - Links
    post:
      consumes:
      - application/json
      description: Create a manual link.
      operationId: create-link
      parameters:
      - description: New Manual Link
        in: body
        name: newLink
        required: true
        schema:
          $ref: '#/definitions/swag.CreateLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Newly created manual link
          schema:
            $ref: '#/definitions/swag.LinkResponse'
        "400":
          description: Malformed JSON.
          schema:
            $ref: '#/definitions/controller.MalformedJSONError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Something went wrong on our end.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Create A Link
      tags:
      - Links
  /links/{linkId}:
    delete:
      description: |-
        Remove a link from your account. This will remove
        - All bank accounts associated with this link.
        - All spending objects associated with each of those bank accounts.
        - All transactions for the those bank accounts.
        This cannot be undone and data cannot be recovered.
        If the link specified is a Plaid link, then the access_token associated with that link will also be
        revoked. Link data is deleted in the background, so if you need to "wait" for all of the link's data to
        be properly deleted. Then you should poll the `/link/wait` endpoint.
      operationId: delete-manual-link
      parameters:
      - description: 'Link ID for the plaid link that is being setup. NOTE: Not Plaid''s
          ID, this is a numeric ID we assign to the object that is returned from the
          callback endpoint.'
        in: path
        name: linkId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Delete Manual Link
      tags:
      - Links
    get:
      description: Retrieve a single specific link using the link's unique Id.
      operationId: get-link
      parameters:
      - description: Link ID
        in: path
        name: linkId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.LinkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidLinkIdError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.LinkNotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Get Link
      tags:
      - Links
    put:
      consumes:
      - application/json
      description: Update an existing link.
      operationId: update-link
      parameters:
      - description: Link ID
        in: path
        name: linkId
        required: true
        type: integer
      - description: Updated Link
        in: body
        name: newLink
        required: true
        schema:
          $ref: '#/definitions/swag.UpdateLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated link object after changes.
          schema:
            $ref: '#/definitions/swag.LinkResponse'
        "304":
          description: If no updates were made then the link object is returned unchanged.
          schema:
            $ref: '#/definitions/swag.LinkResponse'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.LinkNotFoundError'
        "500":
          description: Something went wrong on our end.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Update Link
      tags:
      - Links
  /links/convert/{linkId}:
    put:
      description: Convert an existing link into a manual one.
      operationId: convert-link
      parameters:
      - description: Link ID
        in: path
        name: linkId
        required: true
        type: integer
      - description: New Manual Link
        in: body
        name: newLink
        required: true
        schema:
          $ref: '#/definitions/swag.CreateLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New link object after being converted to a manual link.
          schema:
            $ref: '#/definitions/swag.LinkResponse'
        "400":
          description: The link specified is already a manual link.
          schema:
            $ref: '#/definitions/controller.ApiError'
        "402":
          description: Payment Required
          schema:
            $ref: '#/definitions/controller.SubscriptionNotActiveError'
        "500":
          description: Something went wrong on our end.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Convert A Link To Manual
      tags:
      - Links
  /plaid/link/setup/wait/{linkId:uint64}:
    get:
      description: Long poll endpoint that will timeout if data has not yet been pulled.
        Or will return 200 if data is ready.
      operationId: wait-for-plaid-data
      parameters:
      - description: 'Link ID for the plaid link that is being setup. NOTE: Not Plaid''s
          ID, this is a numeric ID we assign to the object that is returned from the
          callback endpoint.'
        in: path
        name: linkId
        required: true
        type: integer
      responses:
        "200":
          description: ""
        "408":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Wait For Plaid Account Data
      tags:
      - Plaid
  /plaid/token/callback:
    post:
      consumes:
      - application/json
      description: Receives the public token after a user has authenticated their
        bank account to exchange with plaid.
      operationId: plaid-token-callback
      parameters:
      - description: New token callback request.
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/swag.NewPlaidTokenCallbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.PlaidTokenCallbackResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Plaid Token Callback
      tags:
      - Plaid
  /plaid/token/new:
    get:
      description: Generates a link token from Plaid to be used to authenticate a
        user's bank account with our application.
      operationId: new-plaid-token
      parameters:
      - description: If true, the API will check and see if a plaid link token already
          exists for the current user. If one is present then it is returned instead
          of creating a new link token.
        in: query
        name: use_cache
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.PlaidNewLinkTokenResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: New Plaid Token
      tags:
      - Plaid
  /plaid/update/{linkId:uint64}:
    put:
      description: Update an existing Plaid link, this can be used to re-authenticate
        a link if it requires it or to potentially solve an error state.
      operationId: update-plaid-link
      parameters:
      - description: The Link Id that you wish to put into update mode, must be a
          Plaid link.
        in: path
        name: linkId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.PlaidNewLinkTokenResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Update Plaid Link
      tags:
      - Plaid
  /plaid/update/callback:
    post:
      consumes:
      - application/json
      description: This is used when handling an update flow for a Plaid link. Rather
        than returning the public token to the normal callback endpoint, this one
        should be used instead. This one assumes the link already exists and handles
        it slightly differently than it would for a new link.
      operationId: updated-token-callback
      parameters:
      - description: Update token callback request.
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/swag.UpdatePlaidTokenCallbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.LinkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Updated Token Callback
      tags:
      - Plaid
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: M-Token
    type: apiKey
swagger: "2.0"
tags:
- description: Funding Schedules are created by the user to tell us when money should
    be taken from their account to fund their goals and expenses.
  name: Funding Schedules
